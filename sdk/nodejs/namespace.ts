// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provisions a Temporal Cloud namespace.
 *
 * ## Import
 *
 * Namespace can be imported to incorporate existing Namespaces into your Terraform pipeline.
 *
 * To import a Namespace, you need
 *
 * - a resource configuration in your Terraform configuration file/module to accept the imported Namespace. In the example below, the placeholder is "temporalcloud_namespace" "terraform"
 *
 * - the Namespace ID, which includes the Namespace Name and Account ID available at the top of the Namespace's page in the Temporal Cloud UI. In the example below, this is namespaceid.acctid
 *
 * ```sh
 * $ pulumi import temporalcloud:index/namespace:Namespace terraform namespaceid.acctid
 * ```
 */
export class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace {
        return new Namespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'temporalcloud:index/namespace:Namespace';

    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Namespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }

    /**
     * The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud. This is a required field when a Namespace uses mTLS authentication.
     */
    public readonly acceptedClientCa!: pulumi.Output<string | undefined>;
    /**
     * If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
     */
    public readonly apiKeyAuth!: pulumi.Output<boolean>;
    /**
     * A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters. Empty lists are not allowed, omit the attribute instead.
     */
    public readonly certificateFilters!: pulumi.Output<outputs.NamespaceCertificateFilter[] | undefined>;
    /**
     * A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
     */
    public readonly codecServer!: pulumi.Output<outputs.NamespaceCodecServer | undefined>;
    /**
     * The endpoints for the namespace.
     */
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.NamespaceEndpoints>;
    /**
     * The name of the namespace.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
     */
    public readonly retentionDays!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.NamespaceTimeouts | undefined>;

    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceArgs | NamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceState | undefined;
            resourceInputs["acceptedClientCa"] = state ? state.acceptedClientCa : undefined;
            resourceInputs["apiKeyAuth"] = state ? state.apiKeyAuth : undefined;
            resourceInputs["certificateFilters"] = state ? state.certificateFilters : undefined;
            resourceInputs["codecServer"] = state ? state.codecServer : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["retentionDays"] = state ? state.retentionDays : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NamespaceArgs | undefined;
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            if ((!args || args.retentionDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionDays'");
            }
            resourceInputs["acceptedClientCa"] = args ? args.acceptedClientCa : undefined;
            resourceInputs["apiKeyAuth"] = args ? args.apiKeyAuth : undefined;
            resourceInputs["certificateFilters"] = args ? args.certificateFilters : undefined;
            resourceInputs["codecServer"] = args ? args.codecServer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["retentionDays"] = args ? args.retentionDays : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Namespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud. This is a required field when a Namespace uses mTLS authentication.
     */
    acceptedClientCa?: pulumi.Input<string>;
    /**
     * If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
     */
    apiKeyAuth?: pulumi.Input<boolean>;
    /**
     * A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters. Empty lists are not allowed, omit the attribute instead.
     */
    certificateFilters?: pulumi.Input<pulumi.Input<inputs.NamespaceCertificateFilter>[]>;
    /**
     * A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
     */
    codecServer?: pulumi.Input<inputs.NamespaceCodecServer>;
    /**
     * The endpoints for the namespace.
     */
    endpoints?: pulumi.Input<inputs.NamespaceEndpoints>;
    /**
     * The name of the namespace.
     */
    name?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
     */
    retentionDays?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NamespaceTimeouts>;
}

/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud. This is a required field when a Namespace uses mTLS authentication.
     */
    acceptedClientCa?: pulumi.Input<string>;
    /**
     * If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
     */
    apiKeyAuth?: pulumi.Input<boolean>;
    /**
     * A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters. Empty lists are not allowed, omit the attribute instead.
     */
    certificateFilters?: pulumi.Input<pulumi.Input<inputs.NamespaceCertificateFilter>[]>;
    /**
     * A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
     */
    codecServer?: pulumi.Input<inputs.NamespaceCodecServer>;
    /**
     * The name of the namespace.
     */
    name?: pulumi.Input<string>;
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
     */
    retentionDays: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NamespaceTimeouts>;
}
