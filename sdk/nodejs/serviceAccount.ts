// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provisions a Temporal Cloud Service Account.
 *
 * ## Import
 *
 * Service Accounts can be imported to incorporate existing Service Accounts into your Terraform pipeline.
 *
 * To import a Service Account, you need
 *
 * - a resource configuration in your Terraform configuration file/module to accept the imported Service Account. In the example below, the placeholder is "temporalcloud_service_account" "saimport"
 *
 * - the Service Accounts's ID, which is found using the Temporal Cloud CLI tcld sa l. In the example below, this is e3cb94fbdbb845f480044d053d00665b
 *
 * ```sh
 * $ pulumi import temporalcloud:index/serviceAccount:ServiceAccount saimport e3cb94fbdbb845f480044d053d00665b
 * ```
 */
export class ServiceAccount extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountState, opts?: pulumi.CustomResourceOptions): ServiceAccount {
        return new ServiceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'temporalcloud:index/serviceAccount:ServiceAccount';

    /**
     * Returns true if the given object is an instance of ServiceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccount.__pulumiType;
    }

    /**
     * The role on the account. Must be one of admin, developer, or read (case-insensitive).
     */
    public readonly accountAccess!: pulumi.Output<string>;
    /**
     * The name associated with the service account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The set of namespace accesses. Empty sets are not allowed, omit the attribute instead. Service Accounts with an account*access role of admin cannot be assigned explicit permissions to namespaces. Admins implicitly receive access to all Namespaces.
     */
    public readonly namespaceAccesses!: pulumi.Output<outputs.ServiceAccountNamespaceAccess[] | undefined>;
    /**
     * The current state of the Service Account.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceAccountTimeouts | undefined>;

    /**
     * Create a ServiceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountArgs | ServiceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountState | undefined;
            resourceInputs["accountAccess"] = state ? state.accountAccess : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceAccesses"] = state ? state.namespaceAccesses : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ServiceAccountArgs | undefined;
            if ((!args || args.accountAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountAccess'");
            }
            resourceInputs["accountAccess"] = args ? args.accountAccess : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceAccesses"] = args ? args.namespaceAccesses : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccount resources.
 */
export interface ServiceAccountState {
    /**
     * The role on the account. Must be one of admin, developer, or read (case-insensitive).
     */
    accountAccess?: pulumi.Input<string>;
    /**
     * The name associated with the service account.
     */
    name?: pulumi.Input<string>;
    /**
     * The set of namespace accesses. Empty sets are not allowed, omit the attribute instead. Service Accounts with an account*access role of admin cannot be assigned explicit permissions to namespaces. Admins implicitly receive access to all Namespaces.
     */
    namespaceAccesses?: pulumi.Input<pulumi.Input<inputs.ServiceAccountNamespaceAccess>[]>;
    /**
     * The current state of the Service Account.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceAccountTimeouts>;
}

/**
 * The set of arguments for constructing a ServiceAccount resource.
 */
export interface ServiceAccountArgs {
    /**
     * The role on the account. Must be one of admin, developer, or read (case-insensitive).
     */
    accountAccess: pulumi.Input<string>;
    /**
     * The name associated with the service account.
     */
    name?: pulumi.Input<string>;
    /**
     * The set of namespace accesses. Empty sets are not allowed, omit the attribute instead. Service Accounts with an account*access role of admin cannot be assigned explicit permissions to namespaces. Admins implicitly receive access to all Namespaces.
     */
    namespaceAccesses?: pulumi.Input<pulumi.Input<inputs.ServiceAccountNamespaceAccess>[]>;
    timeouts?: pulumi.Input<inputs.ServiceAccountTimeouts>;
}
