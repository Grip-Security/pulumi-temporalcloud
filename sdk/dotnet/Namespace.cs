// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace GripSecurity.Temporalcloud
{
    /// <summary>
    /// Provisions a Temporal Cloud namespace.
    /// 
    /// ## Import
    /// 
    /// Namespace can be imported to incorporate existing Namespaces into your Terraform pipeline.
    /// 
    /// To import a Namespace, you need
    /// 
    /// - a resource configuration in your Terraform configuration file/module to accept the imported Namespace. In the example below, the placeholder is "temporalcloud_namespace" "terraform"
    /// 
    /// - the Namespace ID, which includes the Namespace Name and Account ID available at the top of the Namespace's page in the Temporal Cloud UI. In the example below, this is namespaceid.acctid
    /// 
    /// ```sh
    /// $ pulumi import temporalcloud:index/namespace:Namespace terraform namespaceid.acctid
    /// ```
    /// </summary>
    [TemporalcloudResourceType("temporalcloud:index/namespace:Namespace")]
    public partial class Namespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud. This is a required field when a Namespace uses mTLS authentication.
        /// </summary>
        [Output("acceptedClientCa")]
        public Output<string?> AcceptedClientCa { get; private set; } = null!;

        /// <summary>
        /// If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
        /// </summary>
        [Output("apiKeyAuth")]
        public Output<bool> ApiKeyAuth { get; private set; } = null!;

        /// <summary>
        /// A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters. Empty lists are not allowed, omit the attribute instead.
        /// </summary>
        [Output("certificateFilters")]
        public Output<ImmutableArray<Outputs.NamespaceCertificateFilter>> CertificateFilters { get; private set; } = null!;

        /// <summary>
        /// A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
        /// </summary>
        [Output("codecServer")]
        public Output<Outputs.NamespaceCodecServer?> CodecServer { get; private set; } = null!;

        /// <summary>
        /// The endpoints for the namespace.
        /// </summary>
        [Output("endpoints")]
        public Output<Outputs.NamespaceEndpoints> Endpoints { get; private set; } = null!;

        /// <summary>
        /// The name of the namespace.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
        /// </summary>
        [Output("retentionDays")]
        public Output<int> RetentionDays { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.NamespaceTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a Namespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Namespace(string name, NamespaceArgs args, CustomResourceOptions? options = null)
            : base("temporalcloud:index/namespace:Namespace", name, args ?? new NamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Namespace(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
            : base("temporalcloud:index/namespace:Namespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/Grip-Security/pulumi-temporalcloud/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Namespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Namespace Get(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Namespace(name, id, state, options);
        }
    }

    public sealed class NamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud. This is a required field when a Namespace uses mTLS authentication.
        /// </summary>
        [Input("acceptedClientCa")]
        public Input<string>? AcceptedClientCa { get; set; }

        /// <summary>
        /// If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
        /// </summary>
        [Input("apiKeyAuth")]
        public Input<bool>? ApiKeyAuth { get; set; }

        [Input("certificateFilters")]
        private InputList<Inputs.NamespaceCertificateFilterArgs>? _certificateFilters;

        /// <summary>
        /// A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters. Empty lists are not allowed, omit the attribute instead.
        /// </summary>
        public InputList<Inputs.NamespaceCertificateFilterArgs> CertificateFilters
        {
            get => _certificateFilters ?? (_certificateFilters = new InputList<Inputs.NamespaceCertificateFilterArgs>());
            set => _certificateFilters = value;
        }

        /// <summary>
        /// A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
        /// </summary>
        [Input("codecServer")]
        public Input<Inputs.NamespaceCodecServerArgs>? CodecServer { get; set; }

        /// <summary>
        /// The name of the namespace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("regions", required: true)]
        private InputList<string>? _regions;
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
        /// </summary>
        [Input("retentionDays", required: true)]
        public Input<int> RetentionDays { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.NamespaceTimeoutsArgs>? Timeouts { get; set; }

        public NamespaceArgs()
        {
        }
        public static new NamespaceArgs Empty => new NamespaceArgs();
    }

    public sealed class NamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud. This is a required field when a Namespace uses mTLS authentication.
        /// </summary>
        [Input("acceptedClientCa")]
        public Input<string>? AcceptedClientCa { get; set; }

        /// <summary>
        /// If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
        /// </summary>
        [Input("apiKeyAuth")]
        public Input<bool>? ApiKeyAuth { get; set; }

        [Input("certificateFilters")]
        private InputList<Inputs.NamespaceCertificateFilterGetArgs>? _certificateFilters;

        /// <summary>
        /// A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters. Empty lists are not allowed, omit the attribute instead.
        /// </summary>
        public InputList<Inputs.NamespaceCertificateFilterGetArgs> CertificateFilters
        {
            get => _certificateFilters ?? (_certificateFilters = new InputList<Inputs.NamespaceCertificateFilterGetArgs>());
            set => _certificateFilters = value;
        }

        /// <summary>
        /// A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
        /// </summary>
        [Input("codecServer")]
        public Input<Inputs.NamespaceCodecServerGetArgs>? CodecServer { get; set; }

        /// <summary>
        /// The endpoints for the namespace.
        /// </summary>
        [Input("endpoints")]
        public Input<Inputs.NamespaceEndpointsGetArgs>? Endpoints { get; set; }

        /// <summary>
        /// The name of the namespace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        [Input("timeouts")]
        public Input<Inputs.NamespaceTimeoutsGetArgs>? Timeouts { get; set; }

        public NamespaceState()
        {
        }
        public static new NamespaceState Empty => new NamespaceState();
    }
}
