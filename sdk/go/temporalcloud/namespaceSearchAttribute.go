// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package temporalcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/Grip-Security/pulumi-temporalcloud/sdk/go/temporalcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a [search attribute](https://docs.temporal.io/visibility#search-attribute) in a Temporal Cloud namespace. Note the limits on [quantity](https://docs.temporal.io/cloud/limits#number-of-custom-search-attributes) and [naming](https://docs.temporal.io/cloud/limits#custom-search-attribute-names).
//
// ## Import
//
// Search Attributes can be imported to incorporate existing Namespace Search Attributes into your Terraform pipeline.
//
// # To import a Search Attribute, you need
//
// - a resource configuration in your Terraform configuration file/module to accept the imported Search Attribute. In the example below, the placeholder is "temporalcloud_namespace_search_attribute" "saimport"
//
// - the Namespace ID, which includes the Namespace Name and Account ID available at the top of the Namespace's page in the Temporal Cloud UI. In the example below, this is namespaceid.acctid
//
// - the name of the Search Attribute, which is available in the Search Attribute configuration of Namespace's page in the Temporal Cloud UI. In the example below, this is searchAttr
//
// ```sh
// $ pulumi import temporalcloud:index/namespaceSearchAttribute:NamespaceSearchAttribute saimport namespaceid.acctid/searchAttr
// ```
type NamespaceSearchAttribute struct {
	pulumi.CustomResourceState

	// The name of the search attribute.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the namespace to which this search attribute belongs.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// The type of the search attribute. Must be one of `bool`, `datetime`, `double`, `int`, `keyword`, `keywordList` or `text`. (case-insensitive)
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceSearchAttribute registers a new resource with the given unique name, arguments, and options.
func NewNamespaceSearchAttribute(ctx *pulumi.Context,
	name string, args *NamespaceSearchAttributeArgs, opts ...pulumi.ResourceOption) (*NamespaceSearchAttribute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamespaceSearchAttribute
	err := ctx.RegisterResource("temporalcloud:index/namespaceSearchAttribute:NamespaceSearchAttribute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceSearchAttribute gets an existing NamespaceSearchAttribute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceSearchAttribute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceSearchAttributeState, opts ...pulumi.ResourceOption) (*NamespaceSearchAttribute, error) {
	var resource NamespaceSearchAttribute
	err := ctx.ReadResource("temporalcloud:index/namespaceSearchAttribute:NamespaceSearchAttribute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceSearchAttribute resources.
type namespaceSearchAttributeState struct {
	// The name of the search attribute.
	Name *string `pulumi:"name"`
	// The ID of the namespace to which this search attribute belongs.
	NamespaceId *string `pulumi:"namespaceId"`
	// The type of the search attribute. Must be one of `bool`, `datetime`, `double`, `int`, `keyword`, `keywordList` or `text`. (case-insensitive)
	Type *string `pulumi:"type"`
}

type NamespaceSearchAttributeState struct {
	// The name of the search attribute.
	Name pulumi.StringPtrInput
	// The ID of the namespace to which this search attribute belongs.
	NamespaceId pulumi.StringPtrInput
	// The type of the search attribute. Must be one of `bool`, `datetime`, `double`, `int`, `keyword`, `keywordList` or `text`. (case-insensitive)
	Type pulumi.StringPtrInput
}

func (NamespaceSearchAttributeState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceSearchAttributeState)(nil)).Elem()
}

type namespaceSearchAttributeArgs struct {
	// The name of the search attribute.
	Name *string `pulumi:"name"`
	// The ID of the namespace to which this search attribute belongs.
	NamespaceId string `pulumi:"namespaceId"`
	// The type of the search attribute. Must be one of `bool`, `datetime`, `double`, `int`, `keyword`, `keywordList` or `text`. (case-insensitive)
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NamespaceSearchAttribute resource.
type NamespaceSearchAttributeArgs struct {
	// The name of the search attribute.
	Name pulumi.StringPtrInput
	// The ID of the namespace to which this search attribute belongs.
	NamespaceId pulumi.StringInput
	// The type of the search attribute. Must be one of `bool`, `datetime`, `double`, `int`, `keyword`, `keywordList` or `text`. (case-insensitive)
	Type pulumi.StringInput
}

func (NamespaceSearchAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceSearchAttributeArgs)(nil)).Elem()
}

type NamespaceSearchAttributeInput interface {
	pulumi.Input

	ToNamespaceSearchAttributeOutput() NamespaceSearchAttributeOutput
	ToNamespaceSearchAttributeOutputWithContext(ctx context.Context) NamespaceSearchAttributeOutput
}

func (*NamespaceSearchAttribute) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSearchAttribute)(nil)).Elem()
}

func (i *NamespaceSearchAttribute) ToNamespaceSearchAttributeOutput() NamespaceSearchAttributeOutput {
	return i.ToNamespaceSearchAttributeOutputWithContext(context.Background())
}

func (i *NamespaceSearchAttribute) ToNamespaceSearchAttributeOutputWithContext(ctx context.Context) NamespaceSearchAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSearchAttributeOutput)
}

// NamespaceSearchAttributeArrayInput is an input type that accepts NamespaceSearchAttributeArray and NamespaceSearchAttributeArrayOutput values.
// You can construct a concrete instance of `NamespaceSearchAttributeArrayInput` via:
//
//	NamespaceSearchAttributeArray{ NamespaceSearchAttributeArgs{...} }
type NamespaceSearchAttributeArrayInput interface {
	pulumi.Input

	ToNamespaceSearchAttributeArrayOutput() NamespaceSearchAttributeArrayOutput
	ToNamespaceSearchAttributeArrayOutputWithContext(context.Context) NamespaceSearchAttributeArrayOutput
}

type NamespaceSearchAttributeArray []NamespaceSearchAttributeInput

func (NamespaceSearchAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceSearchAttribute)(nil)).Elem()
}

func (i NamespaceSearchAttributeArray) ToNamespaceSearchAttributeArrayOutput() NamespaceSearchAttributeArrayOutput {
	return i.ToNamespaceSearchAttributeArrayOutputWithContext(context.Background())
}

func (i NamespaceSearchAttributeArray) ToNamespaceSearchAttributeArrayOutputWithContext(ctx context.Context) NamespaceSearchAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSearchAttributeArrayOutput)
}

// NamespaceSearchAttributeMapInput is an input type that accepts NamespaceSearchAttributeMap and NamespaceSearchAttributeMapOutput values.
// You can construct a concrete instance of `NamespaceSearchAttributeMapInput` via:
//
//	NamespaceSearchAttributeMap{ "key": NamespaceSearchAttributeArgs{...} }
type NamespaceSearchAttributeMapInput interface {
	pulumi.Input

	ToNamespaceSearchAttributeMapOutput() NamespaceSearchAttributeMapOutput
	ToNamespaceSearchAttributeMapOutputWithContext(context.Context) NamespaceSearchAttributeMapOutput
}

type NamespaceSearchAttributeMap map[string]NamespaceSearchAttributeInput

func (NamespaceSearchAttributeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceSearchAttribute)(nil)).Elem()
}

func (i NamespaceSearchAttributeMap) ToNamespaceSearchAttributeMapOutput() NamespaceSearchAttributeMapOutput {
	return i.ToNamespaceSearchAttributeMapOutputWithContext(context.Background())
}

func (i NamespaceSearchAttributeMap) ToNamespaceSearchAttributeMapOutputWithContext(ctx context.Context) NamespaceSearchAttributeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSearchAttributeMapOutput)
}

type NamespaceSearchAttributeOutput struct{ *pulumi.OutputState }

func (NamespaceSearchAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSearchAttribute)(nil)).Elem()
}

func (o NamespaceSearchAttributeOutput) ToNamespaceSearchAttributeOutput() NamespaceSearchAttributeOutput {
	return o
}

func (o NamespaceSearchAttributeOutput) ToNamespaceSearchAttributeOutputWithContext(ctx context.Context) NamespaceSearchAttributeOutput {
	return o
}

// The name of the search attribute.
func (o NamespaceSearchAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceSearchAttribute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the namespace to which this search attribute belongs.
func (o NamespaceSearchAttributeOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceSearchAttribute) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// The type of the search attribute. Must be one of `bool`, `datetime`, `double`, `int`, `keyword`, `keywordList` or `text`. (case-insensitive)
func (o NamespaceSearchAttributeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceSearchAttribute) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NamespaceSearchAttributeArrayOutput struct{ *pulumi.OutputState }

func (NamespaceSearchAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceSearchAttribute)(nil)).Elem()
}

func (o NamespaceSearchAttributeArrayOutput) ToNamespaceSearchAttributeArrayOutput() NamespaceSearchAttributeArrayOutput {
	return o
}

func (o NamespaceSearchAttributeArrayOutput) ToNamespaceSearchAttributeArrayOutputWithContext(ctx context.Context) NamespaceSearchAttributeArrayOutput {
	return o
}

func (o NamespaceSearchAttributeArrayOutput) Index(i pulumi.IntInput) NamespaceSearchAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamespaceSearchAttribute {
		return vs[0].([]*NamespaceSearchAttribute)[vs[1].(int)]
	}).(NamespaceSearchAttributeOutput)
}

type NamespaceSearchAttributeMapOutput struct{ *pulumi.OutputState }

func (NamespaceSearchAttributeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceSearchAttribute)(nil)).Elem()
}

func (o NamespaceSearchAttributeMapOutput) ToNamespaceSearchAttributeMapOutput() NamespaceSearchAttributeMapOutput {
	return o
}

func (o NamespaceSearchAttributeMapOutput) ToNamespaceSearchAttributeMapOutputWithContext(ctx context.Context) NamespaceSearchAttributeMapOutput {
	return o
}

func (o NamespaceSearchAttributeMapOutput) MapIndex(k pulumi.StringInput) NamespaceSearchAttributeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamespaceSearchAttribute {
		return vs[0].(map[string]*NamespaceSearchAttribute)[vs[1].(string)]
	}).(NamespaceSearchAttributeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSearchAttributeInput)(nil)).Elem(), &NamespaceSearchAttribute{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSearchAttributeArrayInput)(nil)).Elem(), NamespaceSearchAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSearchAttributeMapInput)(nil)).Elem(), NamespaceSearchAttributeMap{})
	pulumi.RegisterOutputType(NamespaceSearchAttributeOutput{})
	pulumi.RegisterOutputType(NamespaceSearchAttributeArrayOutput{})
	pulumi.RegisterOutputType(NamespaceSearchAttributeMapOutput{})
}
