// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package temporalcloud

import (
	"context"
	"reflect"

	"github.com/Grip-Security/pulumi-temporalcloud/sdk/go/temporalcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApikeyTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// ApikeyTimeoutsInput is an input type that accepts ApikeyTimeoutsArgs and ApikeyTimeoutsOutput values.
// You can construct a concrete instance of `ApikeyTimeoutsInput` via:
//
//	ApikeyTimeoutsArgs{...}
type ApikeyTimeoutsInput interface {
	pulumi.Input

	ToApikeyTimeoutsOutput() ApikeyTimeoutsOutput
	ToApikeyTimeoutsOutputWithContext(context.Context) ApikeyTimeoutsOutput
}

type ApikeyTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (ApikeyTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApikeyTimeouts)(nil)).Elem()
}

func (i ApikeyTimeoutsArgs) ToApikeyTimeoutsOutput() ApikeyTimeoutsOutput {
	return i.ToApikeyTimeoutsOutputWithContext(context.Background())
}

func (i ApikeyTimeoutsArgs) ToApikeyTimeoutsOutputWithContext(ctx context.Context) ApikeyTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApikeyTimeoutsOutput)
}

func (i ApikeyTimeoutsArgs) ToApikeyTimeoutsPtrOutput() ApikeyTimeoutsPtrOutput {
	return i.ToApikeyTimeoutsPtrOutputWithContext(context.Background())
}

func (i ApikeyTimeoutsArgs) ToApikeyTimeoutsPtrOutputWithContext(ctx context.Context) ApikeyTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApikeyTimeoutsOutput).ToApikeyTimeoutsPtrOutputWithContext(ctx)
}

// ApikeyTimeoutsPtrInput is an input type that accepts ApikeyTimeoutsArgs, ApikeyTimeoutsPtr and ApikeyTimeoutsPtrOutput values.
// You can construct a concrete instance of `ApikeyTimeoutsPtrInput` via:
//
//	        ApikeyTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ApikeyTimeoutsPtrInput interface {
	pulumi.Input

	ToApikeyTimeoutsPtrOutput() ApikeyTimeoutsPtrOutput
	ToApikeyTimeoutsPtrOutputWithContext(context.Context) ApikeyTimeoutsPtrOutput
}

type apikeyTimeoutsPtrType ApikeyTimeoutsArgs

func ApikeyTimeoutsPtr(v *ApikeyTimeoutsArgs) ApikeyTimeoutsPtrInput {
	return (*apikeyTimeoutsPtrType)(v)
}

func (*apikeyTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApikeyTimeouts)(nil)).Elem()
}

func (i *apikeyTimeoutsPtrType) ToApikeyTimeoutsPtrOutput() ApikeyTimeoutsPtrOutput {
	return i.ToApikeyTimeoutsPtrOutputWithContext(context.Background())
}

func (i *apikeyTimeoutsPtrType) ToApikeyTimeoutsPtrOutputWithContext(ctx context.Context) ApikeyTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApikeyTimeoutsPtrOutput)
}

type ApikeyTimeoutsOutput struct{ *pulumi.OutputState }

func (ApikeyTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApikeyTimeouts)(nil)).Elem()
}

func (o ApikeyTimeoutsOutput) ToApikeyTimeoutsOutput() ApikeyTimeoutsOutput {
	return o
}

func (o ApikeyTimeoutsOutput) ToApikeyTimeoutsOutputWithContext(ctx context.Context) ApikeyTimeoutsOutput {
	return o
}

func (o ApikeyTimeoutsOutput) ToApikeyTimeoutsPtrOutput() ApikeyTimeoutsPtrOutput {
	return o.ToApikeyTimeoutsPtrOutputWithContext(context.Background())
}

func (o ApikeyTimeoutsOutput) ToApikeyTimeoutsPtrOutputWithContext(ctx context.Context) ApikeyTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApikeyTimeouts) *ApikeyTimeouts {
		return &v
	}).(ApikeyTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ApikeyTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApikeyTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ApikeyTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApikeyTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type ApikeyTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ApikeyTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApikeyTimeouts)(nil)).Elem()
}

func (o ApikeyTimeoutsPtrOutput) ToApikeyTimeoutsPtrOutput() ApikeyTimeoutsPtrOutput {
	return o
}

func (o ApikeyTimeoutsPtrOutput) ToApikeyTimeoutsPtrOutputWithContext(ctx context.Context) ApikeyTimeoutsPtrOutput {
	return o
}

func (o ApikeyTimeoutsPtrOutput) Elem() ApikeyTimeoutsOutput {
	return o.ApplyT(func(v *ApikeyTimeouts) ApikeyTimeouts {
		if v != nil {
			return *v
		}
		var ret ApikeyTimeouts
		return ret
	}).(ApikeyTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ApikeyTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApikeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ApikeyTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApikeyTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type MetricsEndpointTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// MetricsEndpointTimeoutsInput is an input type that accepts MetricsEndpointTimeoutsArgs and MetricsEndpointTimeoutsOutput values.
// You can construct a concrete instance of `MetricsEndpointTimeoutsInput` via:
//
//	MetricsEndpointTimeoutsArgs{...}
type MetricsEndpointTimeoutsInput interface {
	pulumi.Input

	ToMetricsEndpointTimeoutsOutput() MetricsEndpointTimeoutsOutput
	ToMetricsEndpointTimeoutsOutputWithContext(context.Context) MetricsEndpointTimeoutsOutput
}

type MetricsEndpointTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (MetricsEndpointTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricsEndpointTimeouts)(nil)).Elem()
}

func (i MetricsEndpointTimeoutsArgs) ToMetricsEndpointTimeoutsOutput() MetricsEndpointTimeoutsOutput {
	return i.ToMetricsEndpointTimeoutsOutputWithContext(context.Background())
}

func (i MetricsEndpointTimeoutsArgs) ToMetricsEndpointTimeoutsOutputWithContext(ctx context.Context) MetricsEndpointTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsEndpointTimeoutsOutput)
}

func (i MetricsEndpointTimeoutsArgs) ToMetricsEndpointTimeoutsPtrOutput() MetricsEndpointTimeoutsPtrOutput {
	return i.ToMetricsEndpointTimeoutsPtrOutputWithContext(context.Background())
}

func (i MetricsEndpointTimeoutsArgs) ToMetricsEndpointTimeoutsPtrOutputWithContext(ctx context.Context) MetricsEndpointTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsEndpointTimeoutsOutput).ToMetricsEndpointTimeoutsPtrOutputWithContext(ctx)
}

// MetricsEndpointTimeoutsPtrInput is an input type that accepts MetricsEndpointTimeoutsArgs, MetricsEndpointTimeoutsPtr and MetricsEndpointTimeoutsPtrOutput values.
// You can construct a concrete instance of `MetricsEndpointTimeoutsPtrInput` via:
//
//	        MetricsEndpointTimeoutsArgs{...}
//
//	or:
//
//	        nil
type MetricsEndpointTimeoutsPtrInput interface {
	pulumi.Input

	ToMetricsEndpointTimeoutsPtrOutput() MetricsEndpointTimeoutsPtrOutput
	ToMetricsEndpointTimeoutsPtrOutputWithContext(context.Context) MetricsEndpointTimeoutsPtrOutput
}

type metricsEndpointTimeoutsPtrType MetricsEndpointTimeoutsArgs

func MetricsEndpointTimeoutsPtr(v *MetricsEndpointTimeoutsArgs) MetricsEndpointTimeoutsPtrInput {
	return (*metricsEndpointTimeoutsPtrType)(v)
}

func (*metricsEndpointTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsEndpointTimeouts)(nil)).Elem()
}

func (i *metricsEndpointTimeoutsPtrType) ToMetricsEndpointTimeoutsPtrOutput() MetricsEndpointTimeoutsPtrOutput {
	return i.ToMetricsEndpointTimeoutsPtrOutputWithContext(context.Background())
}

func (i *metricsEndpointTimeoutsPtrType) ToMetricsEndpointTimeoutsPtrOutputWithContext(ctx context.Context) MetricsEndpointTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsEndpointTimeoutsPtrOutput)
}

type MetricsEndpointTimeoutsOutput struct{ *pulumi.OutputState }

func (MetricsEndpointTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricsEndpointTimeouts)(nil)).Elem()
}

func (o MetricsEndpointTimeoutsOutput) ToMetricsEndpointTimeoutsOutput() MetricsEndpointTimeoutsOutput {
	return o
}

func (o MetricsEndpointTimeoutsOutput) ToMetricsEndpointTimeoutsOutputWithContext(ctx context.Context) MetricsEndpointTimeoutsOutput {
	return o
}

func (o MetricsEndpointTimeoutsOutput) ToMetricsEndpointTimeoutsPtrOutput() MetricsEndpointTimeoutsPtrOutput {
	return o.ToMetricsEndpointTimeoutsPtrOutputWithContext(context.Background())
}

func (o MetricsEndpointTimeoutsOutput) ToMetricsEndpointTimeoutsPtrOutputWithContext(ctx context.Context) MetricsEndpointTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricsEndpointTimeouts) *MetricsEndpointTimeouts {
		return &v
	}).(MetricsEndpointTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o MetricsEndpointTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricsEndpointTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o MetricsEndpointTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricsEndpointTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o MetricsEndpointTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricsEndpointTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type MetricsEndpointTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (MetricsEndpointTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsEndpointTimeouts)(nil)).Elem()
}

func (o MetricsEndpointTimeoutsPtrOutput) ToMetricsEndpointTimeoutsPtrOutput() MetricsEndpointTimeoutsPtrOutput {
	return o
}

func (o MetricsEndpointTimeoutsPtrOutput) ToMetricsEndpointTimeoutsPtrOutputWithContext(ctx context.Context) MetricsEndpointTimeoutsPtrOutput {
	return o
}

func (o MetricsEndpointTimeoutsPtrOutput) Elem() MetricsEndpointTimeoutsOutput {
	return o.ApplyT(func(v *MetricsEndpointTimeouts) MetricsEndpointTimeouts {
		if v != nil {
			return *v
		}
		var ret MetricsEndpointTimeouts
		return ret
	}).(MetricsEndpointTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o MetricsEndpointTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsEndpointTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o MetricsEndpointTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsEndpointTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o MetricsEndpointTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsEndpointTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type NamespaceCertificateFilter struct {
	// The certificate's common name.
	CommonName *string `pulumi:"commonName"`
	// The certificate's organization.
	Organization *string `pulumi:"organization"`
	// The certificate's organizational unit.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// The certificate's subject alternative name (or SAN).
	SubjectAlternativeName *string `pulumi:"subjectAlternativeName"`
}

// NamespaceCertificateFilterInput is an input type that accepts NamespaceCertificateFilterArgs and NamespaceCertificateFilterOutput values.
// You can construct a concrete instance of `NamespaceCertificateFilterInput` via:
//
//	NamespaceCertificateFilterArgs{...}
type NamespaceCertificateFilterInput interface {
	pulumi.Input

	ToNamespaceCertificateFilterOutput() NamespaceCertificateFilterOutput
	ToNamespaceCertificateFilterOutputWithContext(context.Context) NamespaceCertificateFilterOutput
}

type NamespaceCertificateFilterArgs struct {
	// The certificate's common name.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// The certificate's organization.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// The certificate's organizational unit.
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// The certificate's subject alternative name (or SAN).
	SubjectAlternativeName pulumi.StringPtrInput `pulumi:"subjectAlternativeName"`
}

func (NamespaceCertificateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCertificateFilter)(nil)).Elem()
}

func (i NamespaceCertificateFilterArgs) ToNamespaceCertificateFilterOutput() NamespaceCertificateFilterOutput {
	return i.ToNamespaceCertificateFilterOutputWithContext(context.Background())
}

func (i NamespaceCertificateFilterArgs) ToNamespaceCertificateFilterOutputWithContext(ctx context.Context) NamespaceCertificateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCertificateFilterOutput)
}

// NamespaceCertificateFilterArrayInput is an input type that accepts NamespaceCertificateFilterArray and NamespaceCertificateFilterArrayOutput values.
// You can construct a concrete instance of `NamespaceCertificateFilterArrayInput` via:
//
//	NamespaceCertificateFilterArray{ NamespaceCertificateFilterArgs{...} }
type NamespaceCertificateFilterArrayInput interface {
	pulumi.Input

	ToNamespaceCertificateFilterArrayOutput() NamespaceCertificateFilterArrayOutput
	ToNamespaceCertificateFilterArrayOutputWithContext(context.Context) NamespaceCertificateFilterArrayOutput
}

type NamespaceCertificateFilterArray []NamespaceCertificateFilterInput

func (NamespaceCertificateFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceCertificateFilter)(nil)).Elem()
}

func (i NamespaceCertificateFilterArray) ToNamespaceCertificateFilterArrayOutput() NamespaceCertificateFilterArrayOutput {
	return i.ToNamespaceCertificateFilterArrayOutputWithContext(context.Background())
}

func (i NamespaceCertificateFilterArray) ToNamespaceCertificateFilterArrayOutputWithContext(ctx context.Context) NamespaceCertificateFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCertificateFilterArrayOutput)
}

type NamespaceCertificateFilterOutput struct{ *pulumi.OutputState }

func (NamespaceCertificateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCertificateFilter)(nil)).Elem()
}

func (o NamespaceCertificateFilterOutput) ToNamespaceCertificateFilterOutput() NamespaceCertificateFilterOutput {
	return o
}

func (o NamespaceCertificateFilterOutput) ToNamespaceCertificateFilterOutputWithContext(ctx context.Context) NamespaceCertificateFilterOutput {
	return o
}

// The certificate's common name.
func (o NamespaceCertificateFilterOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCertificateFilter) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// The certificate's organization.
func (o NamespaceCertificateFilterOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCertificateFilter) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// The certificate's organizational unit.
func (o NamespaceCertificateFilterOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCertificateFilter) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// The certificate's subject alternative name (or SAN).
func (o NamespaceCertificateFilterOutput) SubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceCertificateFilter) *string { return v.SubjectAlternativeName }).(pulumi.StringPtrOutput)
}

type NamespaceCertificateFilterArrayOutput struct{ *pulumi.OutputState }

func (NamespaceCertificateFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceCertificateFilter)(nil)).Elem()
}

func (o NamespaceCertificateFilterArrayOutput) ToNamespaceCertificateFilterArrayOutput() NamespaceCertificateFilterArrayOutput {
	return o
}

func (o NamespaceCertificateFilterArrayOutput) ToNamespaceCertificateFilterArrayOutputWithContext(ctx context.Context) NamespaceCertificateFilterArrayOutput {
	return o
}

func (o NamespaceCertificateFilterArrayOutput) Index(i pulumi.IntInput) NamespaceCertificateFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceCertificateFilter {
		return vs[0].([]NamespaceCertificateFilter)[vs[1].(int)]
	}).(NamespaceCertificateFilterOutput)
}

type NamespaceCodecServer struct {
	// The endpoint of the codec server. Must begin with "https".
	Endpoint string `pulumi:"endpoint"`
	// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
	IncludeCrossOriginCredentials *bool `pulumi:"includeCrossOriginCredentials"`
	// If true, Temporal Cloud will pass the access token to the codec server upon each request.
	PassAccessToken *bool `pulumi:"passAccessToken"`
}

// NamespaceCodecServerInput is an input type that accepts NamespaceCodecServerArgs and NamespaceCodecServerOutput values.
// You can construct a concrete instance of `NamespaceCodecServerInput` via:
//
//	NamespaceCodecServerArgs{...}
type NamespaceCodecServerInput interface {
	pulumi.Input

	ToNamespaceCodecServerOutput() NamespaceCodecServerOutput
	ToNamespaceCodecServerOutputWithContext(context.Context) NamespaceCodecServerOutput
}

type NamespaceCodecServerArgs struct {
	// The endpoint of the codec server. Must begin with "https".
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
	IncludeCrossOriginCredentials pulumi.BoolPtrInput `pulumi:"includeCrossOriginCredentials"`
	// If true, Temporal Cloud will pass the access token to the codec server upon each request.
	PassAccessToken pulumi.BoolPtrInput `pulumi:"passAccessToken"`
}

func (NamespaceCodecServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCodecServer)(nil)).Elem()
}

func (i NamespaceCodecServerArgs) ToNamespaceCodecServerOutput() NamespaceCodecServerOutput {
	return i.ToNamespaceCodecServerOutputWithContext(context.Background())
}

func (i NamespaceCodecServerArgs) ToNamespaceCodecServerOutputWithContext(ctx context.Context) NamespaceCodecServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCodecServerOutput)
}

func (i NamespaceCodecServerArgs) ToNamespaceCodecServerPtrOutput() NamespaceCodecServerPtrOutput {
	return i.ToNamespaceCodecServerPtrOutputWithContext(context.Background())
}

func (i NamespaceCodecServerArgs) ToNamespaceCodecServerPtrOutputWithContext(ctx context.Context) NamespaceCodecServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCodecServerOutput).ToNamespaceCodecServerPtrOutputWithContext(ctx)
}

// NamespaceCodecServerPtrInput is an input type that accepts NamespaceCodecServerArgs, NamespaceCodecServerPtr and NamespaceCodecServerPtrOutput values.
// You can construct a concrete instance of `NamespaceCodecServerPtrInput` via:
//
//	        NamespaceCodecServerArgs{...}
//
//	or:
//
//	        nil
type NamespaceCodecServerPtrInput interface {
	pulumi.Input

	ToNamespaceCodecServerPtrOutput() NamespaceCodecServerPtrOutput
	ToNamespaceCodecServerPtrOutputWithContext(context.Context) NamespaceCodecServerPtrOutput
}

type namespaceCodecServerPtrType NamespaceCodecServerArgs

func NamespaceCodecServerPtr(v *NamespaceCodecServerArgs) NamespaceCodecServerPtrInput {
	return (*namespaceCodecServerPtrType)(v)
}

func (*namespaceCodecServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCodecServer)(nil)).Elem()
}

func (i *namespaceCodecServerPtrType) ToNamespaceCodecServerPtrOutput() NamespaceCodecServerPtrOutput {
	return i.ToNamespaceCodecServerPtrOutputWithContext(context.Background())
}

func (i *namespaceCodecServerPtrType) ToNamespaceCodecServerPtrOutputWithContext(ctx context.Context) NamespaceCodecServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCodecServerPtrOutput)
}

type NamespaceCodecServerOutput struct{ *pulumi.OutputState }

func (NamespaceCodecServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCodecServer)(nil)).Elem()
}

func (o NamespaceCodecServerOutput) ToNamespaceCodecServerOutput() NamespaceCodecServerOutput {
	return o
}

func (o NamespaceCodecServerOutput) ToNamespaceCodecServerOutputWithContext(ctx context.Context) NamespaceCodecServerOutput {
	return o
}

func (o NamespaceCodecServerOutput) ToNamespaceCodecServerPtrOutput() NamespaceCodecServerPtrOutput {
	return o.ToNamespaceCodecServerPtrOutputWithContext(context.Background())
}

func (o NamespaceCodecServerOutput) ToNamespaceCodecServerPtrOutputWithContext(ctx context.Context) NamespaceCodecServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceCodecServer) *NamespaceCodecServer {
		return &v
	}).(NamespaceCodecServerPtrOutput)
}

// The endpoint of the codec server. Must begin with "https".
func (o NamespaceCodecServerOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceCodecServer) string { return v.Endpoint }).(pulumi.StringOutput)
}

// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
func (o NamespaceCodecServerOutput) IncludeCrossOriginCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceCodecServer) *bool { return v.IncludeCrossOriginCredentials }).(pulumi.BoolPtrOutput)
}

// If true, Temporal Cloud will pass the access token to the codec server upon each request.
func (o NamespaceCodecServerOutput) PassAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceCodecServer) *bool { return v.PassAccessToken }).(pulumi.BoolPtrOutput)
}

type NamespaceCodecServerPtrOutput struct{ *pulumi.OutputState }

func (NamespaceCodecServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCodecServer)(nil)).Elem()
}

func (o NamespaceCodecServerPtrOutput) ToNamespaceCodecServerPtrOutput() NamespaceCodecServerPtrOutput {
	return o
}

func (o NamespaceCodecServerPtrOutput) ToNamespaceCodecServerPtrOutputWithContext(ctx context.Context) NamespaceCodecServerPtrOutput {
	return o
}

func (o NamespaceCodecServerPtrOutput) Elem() NamespaceCodecServerOutput {
	return o.ApplyT(func(v *NamespaceCodecServer) NamespaceCodecServer {
		if v != nil {
			return *v
		}
		var ret NamespaceCodecServer
		return ret
	}).(NamespaceCodecServerOutput)
}

// The endpoint of the codec server. Must begin with "https".
func (o NamespaceCodecServerPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceCodecServer) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
func (o NamespaceCodecServerPtrOutput) IncludeCrossOriginCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceCodecServer) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeCrossOriginCredentials
	}).(pulumi.BoolPtrOutput)
}

// If true, Temporal Cloud will pass the access token to the codec server upon each request.
func (o NamespaceCodecServerPtrOutput) PassAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceCodecServer) *bool {
		if v == nil {
			return nil
		}
		return v.PassAccessToken
	}).(pulumi.BoolPtrOutput)
}

type NamespaceEndpoints struct {
	// The gRPC address for API key client connections (may be empty if API keys are disabled).
	GrpcAddress *string `pulumi:"grpcAddress"`
	// The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
	MtlsGrpcAddress *string `pulumi:"mtlsGrpcAddress"`
	// The address in the Temporal Cloud Web UI for the namespace
	WebAddress *string `pulumi:"webAddress"`
}

// NamespaceEndpointsInput is an input type that accepts NamespaceEndpointsArgs and NamespaceEndpointsOutput values.
// You can construct a concrete instance of `NamespaceEndpointsInput` via:
//
//	NamespaceEndpointsArgs{...}
type NamespaceEndpointsInput interface {
	pulumi.Input

	ToNamespaceEndpointsOutput() NamespaceEndpointsOutput
	ToNamespaceEndpointsOutputWithContext(context.Context) NamespaceEndpointsOutput
}

type NamespaceEndpointsArgs struct {
	// The gRPC address for API key client connections (may be empty if API keys are disabled).
	GrpcAddress pulumi.StringPtrInput `pulumi:"grpcAddress"`
	// The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
	MtlsGrpcAddress pulumi.StringPtrInput `pulumi:"mtlsGrpcAddress"`
	// The address in the Temporal Cloud Web UI for the namespace
	WebAddress pulumi.StringPtrInput `pulumi:"webAddress"`
}

func (NamespaceEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceEndpoints)(nil)).Elem()
}

func (i NamespaceEndpointsArgs) ToNamespaceEndpointsOutput() NamespaceEndpointsOutput {
	return i.ToNamespaceEndpointsOutputWithContext(context.Background())
}

func (i NamespaceEndpointsArgs) ToNamespaceEndpointsOutputWithContext(ctx context.Context) NamespaceEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceEndpointsOutput)
}

func (i NamespaceEndpointsArgs) ToNamespaceEndpointsPtrOutput() NamespaceEndpointsPtrOutput {
	return i.ToNamespaceEndpointsPtrOutputWithContext(context.Background())
}

func (i NamespaceEndpointsArgs) ToNamespaceEndpointsPtrOutputWithContext(ctx context.Context) NamespaceEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceEndpointsOutput).ToNamespaceEndpointsPtrOutputWithContext(ctx)
}

// NamespaceEndpointsPtrInput is an input type that accepts NamespaceEndpointsArgs, NamespaceEndpointsPtr and NamespaceEndpointsPtrOutput values.
// You can construct a concrete instance of `NamespaceEndpointsPtrInput` via:
//
//	        NamespaceEndpointsArgs{...}
//
//	or:
//
//	        nil
type NamespaceEndpointsPtrInput interface {
	pulumi.Input

	ToNamespaceEndpointsPtrOutput() NamespaceEndpointsPtrOutput
	ToNamespaceEndpointsPtrOutputWithContext(context.Context) NamespaceEndpointsPtrOutput
}

type namespaceEndpointsPtrType NamespaceEndpointsArgs

func NamespaceEndpointsPtr(v *NamespaceEndpointsArgs) NamespaceEndpointsPtrInput {
	return (*namespaceEndpointsPtrType)(v)
}

func (*namespaceEndpointsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceEndpoints)(nil)).Elem()
}

func (i *namespaceEndpointsPtrType) ToNamespaceEndpointsPtrOutput() NamespaceEndpointsPtrOutput {
	return i.ToNamespaceEndpointsPtrOutputWithContext(context.Background())
}

func (i *namespaceEndpointsPtrType) ToNamespaceEndpointsPtrOutputWithContext(ctx context.Context) NamespaceEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceEndpointsPtrOutput)
}

type NamespaceEndpointsOutput struct{ *pulumi.OutputState }

func (NamespaceEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceEndpoints)(nil)).Elem()
}

func (o NamespaceEndpointsOutput) ToNamespaceEndpointsOutput() NamespaceEndpointsOutput {
	return o
}

func (o NamespaceEndpointsOutput) ToNamespaceEndpointsOutputWithContext(ctx context.Context) NamespaceEndpointsOutput {
	return o
}

func (o NamespaceEndpointsOutput) ToNamespaceEndpointsPtrOutput() NamespaceEndpointsPtrOutput {
	return o.ToNamespaceEndpointsPtrOutputWithContext(context.Background())
}

func (o NamespaceEndpointsOutput) ToNamespaceEndpointsPtrOutputWithContext(ctx context.Context) NamespaceEndpointsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceEndpoints) *NamespaceEndpoints {
		return &v
	}).(NamespaceEndpointsPtrOutput)
}

// The gRPC address for API key client connections (may be empty if API keys are disabled).
func (o NamespaceEndpointsOutput) GrpcAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceEndpoints) *string { return v.GrpcAddress }).(pulumi.StringPtrOutput)
}

// The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
func (o NamespaceEndpointsOutput) MtlsGrpcAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceEndpoints) *string { return v.MtlsGrpcAddress }).(pulumi.StringPtrOutput)
}

// The address in the Temporal Cloud Web UI for the namespace
func (o NamespaceEndpointsOutput) WebAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceEndpoints) *string { return v.WebAddress }).(pulumi.StringPtrOutput)
}

type NamespaceEndpointsPtrOutput struct{ *pulumi.OutputState }

func (NamespaceEndpointsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceEndpoints)(nil)).Elem()
}

func (o NamespaceEndpointsPtrOutput) ToNamespaceEndpointsPtrOutput() NamespaceEndpointsPtrOutput {
	return o
}

func (o NamespaceEndpointsPtrOutput) ToNamespaceEndpointsPtrOutputWithContext(ctx context.Context) NamespaceEndpointsPtrOutput {
	return o
}

func (o NamespaceEndpointsPtrOutput) Elem() NamespaceEndpointsOutput {
	return o.ApplyT(func(v *NamespaceEndpoints) NamespaceEndpoints {
		if v != nil {
			return *v
		}
		var ret NamespaceEndpoints
		return ret
	}).(NamespaceEndpointsOutput)
}

// The gRPC address for API key client connections (may be empty if API keys are disabled).
func (o NamespaceEndpointsPtrOutput) GrpcAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.GrpcAddress
	}).(pulumi.StringPtrOutput)
}

// The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
func (o NamespaceEndpointsPtrOutput) MtlsGrpcAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.MtlsGrpcAddress
	}).(pulumi.StringPtrOutput)
}

// The address in the Temporal Cloud Web UI for the namespace
func (o NamespaceEndpointsPtrOutput) WebAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.WebAddress
	}).(pulumi.StringPtrOutput)
}

type NamespaceTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// NamespaceTimeoutsInput is an input type that accepts NamespaceTimeoutsArgs and NamespaceTimeoutsOutput values.
// You can construct a concrete instance of `NamespaceTimeoutsInput` via:
//
//	NamespaceTimeoutsArgs{...}
type NamespaceTimeoutsInput interface {
	pulumi.Input

	ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput
	ToNamespaceTimeoutsOutputWithContext(context.Context) NamespaceTimeoutsOutput
}

type NamespaceTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (NamespaceTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return i.ToNamespaceTimeoutsOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput)
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return i.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (i NamespaceTimeoutsArgs) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsOutput).ToNamespaceTimeoutsPtrOutputWithContext(ctx)
}

// NamespaceTimeoutsPtrInput is an input type that accepts NamespaceTimeoutsArgs, NamespaceTimeoutsPtr and NamespaceTimeoutsPtrOutput values.
// You can construct a concrete instance of `NamespaceTimeoutsPtrInput` via:
//
//	        NamespaceTimeoutsArgs{...}
//
//	or:
//
//	        nil
type NamespaceTimeoutsPtrInput interface {
	pulumi.Input

	ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput
	ToNamespaceTimeoutsPtrOutputWithContext(context.Context) NamespaceTimeoutsPtrOutput
}

type namespaceTimeoutsPtrType NamespaceTimeoutsArgs

func NamespaceTimeoutsPtr(v *NamespaceTimeoutsArgs) NamespaceTimeoutsPtrInput {
	return (*namespaceTimeoutsPtrType)(v)
}

func (*namespaceTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTimeouts)(nil)).Elem()
}

func (i *namespaceTimeoutsPtrType) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return i.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (i *namespaceTimeoutsPtrType) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTimeoutsPtrOutput)
}

type NamespaceTimeoutsOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutput() NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsOutputWithContext(ctx context.Context) NamespaceTimeoutsOutput {
	return o
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return o.ToNamespaceTimeoutsPtrOutputWithContext(context.Background())
}

func (o NamespaceTimeoutsOutput) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceTimeouts) *NamespaceTimeouts {
		return &v
	}).(NamespaceTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o NamespaceTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o NamespaceTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type NamespaceTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (NamespaceTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTimeouts)(nil)).Elem()
}

func (o NamespaceTimeoutsPtrOutput) ToNamespaceTimeoutsPtrOutput() NamespaceTimeoutsPtrOutput {
	return o
}

func (o NamespaceTimeoutsPtrOutput) ToNamespaceTimeoutsPtrOutputWithContext(ctx context.Context) NamespaceTimeoutsPtrOutput {
	return o
}

func (o NamespaceTimeoutsPtrOutput) Elem() NamespaceTimeoutsOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) NamespaceTimeouts {
		if v != nil {
			return *v
		}
		var ret NamespaceTimeouts
		return ret
	}).(NamespaceTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o NamespaceTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o NamespaceTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type NexusEndpointTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// NexusEndpointTimeoutsInput is an input type that accepts NexusEndpointTimeoutsArgs and NexusEndpointTimeoutsOutput values.
// You can construct a concrete instance of `NexusEndpointTimeoutsInput` via:
//
//	NexusEndpointTimeoutsArgs{...}
type NexusEndpointTimeoutsInput interface {
	pulumi.Input

	ToNexusEndpointTimeoutsOutput() NexusEndpointTimeoutsOutput
	ToNexusEndpointTimeoutsOutputWithContext(context.Context) NexusEndpointTimeoutsOutput
}

type NexusEndpointTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (NexusEndpointTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusEndpointTimeouts)(nil)).Elem()
}

func (i NexusEndpointTimeoutsArgs) ToNexusEndpointTimeoutsOutput() NexusEndpointTimeoutsOutput {
	return i.ToNexusEndpointTimeoutsOutputWithContext(context.Background())
}

func (i NexusEndpointTimeoutsArgs) ToNexusEndpointTimeoutsOutputWithContext(ctx context.Context) NexusEndpointTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusEndpointTimeoutsOutput)
}

func (i NexusEndpointTimeoutsArgs) ToNexusEndpointTimeoutsPtrOutput() NexusEndpointTimeoutsPtrOutput {
	return i.ToNexusEndpointTimeoutsPtrOutputWithContext(context.Background())
}

func (i NexusEndpointTimeoutsArgs) ToNexusEndpointTimeoutsPtrOutputWithContext(ctx context.Context) NexusEndpointTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusEndpointTimeoutsOutput).ToNexusEndpointTimeoutsPtrOutputWithContext(ctx)
}

// NexusEndpointTimeoutsPtrInput is an input type that accepts NexusEndpointTimeoutsArgs, NexusEndpointTimeoutsPtr and NexusEndpointTimeoutsPtrOutput values.
// You can construct a concrete instance of `NexusEndpointTimeoutsPtrInput` via:
//
//	        NexusEndpointTimeoutsArgs{...}
//
//	or:
//
//	        nil
type NexusEndpointTimeoutsPtrInput interface {
	pulumi.Input

	ToNexusEndpointTimeoutsPtrOutput() NexusEndpointTimeoutsPtrOutput
	ToNexusEndpointTimeoutsPtrOutputWithContext(context.Context) NexusEndpointTimeoutsPtrOutput
}

type nexusEndpointTimeoutsPtrType NexusEndpointTimeoutsArgs

func NexusEndpointTimeoutsPtr(v *NexusEndpointTimeoutsArgs) NexusEndpointTimeoutsPtrInput {
	return (*nexusEndpointTimeoutsPtrType)(v)
}

func (*nexusEndpointTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusEndpointTimeouts)(nil)).Elem()
}

func (i *nexusEndpointTimeoutsPtrType) ToNexusEndpointTimeoutsPtrOutput() NexusEndpointTimeoutsPtrOutput {
	return i.ToNexusEndpointTimeoutsPtrOutputWithContext(context.Background())
}

func (i *nexusEndpointTimeoutsPtrType) ToNexusEndpointTimeoutsPtrOutputWithContext(ctx context.Context) NexusEndpointTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusEndpointTimeoutsPtrOutput)
}

type NexusEndpointTimeoutsOutput struct{ *pulumi.OutputState }

func (NexusEndpointTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusEndpointTimeouts)(nil)).Elem()
}

func (o NexusEndpointTimeoutsOutput) ToNexusEndpointTimeoutsOutput() NexusEndpointTimeoutsOutput {
	return o
}

func (o NexusEndpointTimeoutsOutput) ToNexusEndpointTimeoutsOutputWithContext(ctx context.Context) NexusEndpointTimeoutsOutput {
	return o
}

func (o NexusEndpointTimeoutsOutput) ToNexusEndpointTimeoutsPtrOutput() NexusEndpointTimeoutsPtrOutput {
	return o.ToNexusEndpointTimeoutsPtrOutputWithContext(context.Background())
}

func (o NexusEndpointTimeoutsOutput) ToNexusEndpointTimeoutsPtrOutputWithContext(ctx context.Context) NexusEndpointTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NexusEndpointTimeouts) *NexusEndpointTimeouts {
		return &v
	}).(NexusEndpointTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o NexusEndpointTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusEndpointTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o NexusEndpointTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NexusEndpointTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type NexusEndpointTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (NexusEndpointTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusEndpointTimeouts)(nil)).Elem()
}

func (o NexusEndpointTimeoutsPtrOutput) ToNexusEndpointTimeoutsPtrOutput() NexusEndpointTimeoutsPtrOutput {
	return o
}

func (o NexusEndpointTimeoutsPtrOutput) ToNexusEndpointTimeoutsPtrOutputWithContext(ctx context.Context) NexusEndpointTimeoutsPtrOutput {
	return o
}

func (o NexusEndpointTimeoutsPtrOutput) Elem() NexusEndpointTimeoutsOutput {
	return o.ApplyT(func(v *NexusEndpointTimeouts) NexusEndpointTimeouts {
		if v != nil {
			return *v
		}
		var ret NexusEndpointTimeouts
		return ret
	}).(NexusEndpointTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o NexusEndpointTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusEndpointTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o NexusEndpointTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusEndpointTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type NexusEndpointWorkerTarget struct {
	// The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
	NamespaceId string `pulumi:"namespaceId"`
	// The task queue on the cloud namespace to route requests to.
	TaskQueue string `pulumi:"taskQueue"`
}

// NexusEndpointWorkerTargetInput is an input type that accepts NexusEndpointWorkerTargetArgs and NexusEndpointWorkerTargetOutput values.
// You can construct a concrete instance of `NexusEndpointWorkerTargetInput` via:
//
//	NexusEndpointWorkerTargetArgs{...}
type NexusEndpointWorkerTargetInput interface {
	pulumi.Input

	ToNexusEndpointWorkerTargetOutput() NexusEndpointWorkerTargetOutput
	ToNexusEndpointWorkerTargetOutputWithContext(context.Context) NexusEndpointWorkerTargetOutput
}

type NexusEndpointWorkerTargetArgs struct {
	// The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// The task queue on the cloud namespace to route requests to.
	TaskQueue pulumi.StringInput `pulumi:"taskQueue"`
}

func (NexusEndpointWorkerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusEndpointWorkerTarget)(nil)).Elem()
}

func (i NexusEndpointWorkerTargetArgs) ToNexusEndpointWorkerTargetOutput() NexusEndpointWorkerTargetOutput {
	return i.ToNexusEndpointWorkerTargetOutputWithContext(context.Background())
}

func (i NexusEndpointWorkerTargetArgs) ToNexusEndpointWorkerTargetOutputWithContext(ctx context.Context) NexusEndpointWorkerTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusEndpointWorkerTargetOutput)
}

func (i NexusEndpointWorkerTargetArgs) ToNexusEndpointWorkerTargetPtrOutput() NexusEndpointWorkerTargetPtrOutput {
	return i.ToNexusEndpointWorkerTargetPtrOutputWithContext(context.Background())
}

func (i NexusEndpointWorkerTargetArgs) ToNexusEndpointWorkerTargetPtrOutputWithContext(ctx context.Context) NexusEndpointWorkerTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusEndpointWorkerTargetOutput).ToNexusEndpointWorkerTargetPtrOutputWithContext(ctx)
}

// NexusEndpointWorkerTargetPtrInput is an input type that accepts NexusEndpointWorkerTargetArgs, NexusEndpointWorkerTargetPtr and NexusEndpointWorkerTargetPtrOutput values.
// You can construct a concrete instance of `NexusEndpointWorkerTargetPtrInput` via:
//
//	        NexusEndpointWorkerTargetArgs{...}
//
//	or:
//
//	        nil
type NexusEndpointWorkerTargetPtrInput interface {
	pulumi.Input

	ToNexusEndpointWorkerTargetPtrOutput() NexusEndpointWorkerTargetPtrOutput
	ToNexusEndpointWorkerTargetPtrOutputWithContext(context.Context) NexusEndpointWorkerTargetPtrOutput
}

type nexusEndpointWorkerTargetPtrType NexusEndpointWorkerTargetArgs

func NexusEndpointWorkerTargetPtr(v *NexusEndpointWorkerTargetArgs) NexusEndpointWorkerTargetPtrInput {
	return (*nexusEndpointWorkerTargetPtrType)(v)
}

func (*nexusEndpointWorkerTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusEndpointWorkerTarget)(nil)).Elem()
}

func (i *nexusEndpointWorkerTargetPtrType) ToNexusEndpointWorkerTargetPtrOutput() NexusEndpointWorkerTargetPtrOutput {
	return i.ToNexusEndpointWorkerTargetPtrOutputWithContext(context.Background())
}

func (i *nexusEndpointWorkerTargetPtrType) ToNexusEndpointWorkerTargetPtrOutputWithContext(ctx context.Context) NexusEndpointWorkerTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NexusEndpointWorkerTargetPtrOutput)
}

type NexusEndpointWorkerTargetOutput struct{ *pulumi.OutputState }

func (NexusEndpointWorkerTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NexusEndpointWorkerTarget)(nil)).Elem()
}

func (o NexusEndpointWorkerTargetOutput) ToNexusEndpointWorkerTargetOutput() NexusEndpointWorkerTargetOutput {
	return o
}

func (o NexusEndpointWorkerTargetOutput) ToNexusEndpointWorkerTargetOutputWithContext(ctx context.Context) NexusEndpointWorkerTargetOutput {
	return o
}

func (o NexusEndpointWorkerTargetOutput) ToNexusEndpointWorkerTargetPtrOutput() NexusEndpointWorkerTargetPtrOutput {
	return o.ToNexusEndpointWorkerTargetPtrOutputWithContext(context.Background())
}

func (o NexusEndpointWorkerTargetOutput) ToNexusEndpointWorkerTargetPtrOutputWithContext(ctx context.Context) NexusEndpointWorkerTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NexusEndpointWorkerTarget) *NexusEndpointWorkerTarget {
		return &v
	}).(NexusEndpointWorkerTargetPtrOutput)
}

// The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
func (o NexusEndpointWorkerTargetOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v NexusEndpointWorkerTarget) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The task queue on the cloud namespace to route requests to.
func (o NexusEndpointWorkerTargetOutput) TaskQueue() pulumi.StringOutput {
	return o.ApplyT(func(v NexusEndpointWorkerTarget) string { return v.TaskQueue }).(pulumi.StringOutput)
}

type NexusEndpointWorkerTargetPtrOutput struct{ *pulumi.OutputState }

func (NexusEndpointWorkerTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NexusEndpointWorkerTarget)(nil)).Elem()
}

func (o NexusEndpointWorkerTargetPtrOutput) ToNexusEndpointWorkerTargetPtrOutput() NexusEndpointWorkerTargetPtrOutput {
	return o
}

func (o NexusEndpointWorkerTargetPtrOutput) ToNexusEndpointWorkerTargetPtrOutputWithContext(ctx context.Context) NexusEndpointWorkerTargetPtrOutput {
	return o
}

func (o NexusEndpointWorkerTargetPtrOutput) Elem() NexusEndpointWorkerTargetOutput {
	return o.ApplyT(func(v *NexusEndpointWorkerTarget) NexusEndpointWorkerTarget {
		if v != nil {
			return *v
		}
		var ret NexusEndpointWorkerTarget
		return ret
	}).(NexusEndpointWorkerTargetOutput)
}

// The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
func (o NexusEndpointWorkerTargetPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusEndpointWorkerTarget) *string {
		if v == nil {
			return nil
		}
		return &v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// The task queue on the cloud namespace to route requests to.
func (o NexusEndpointWorkerTargetPtrOutput) TaskQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NexusEndpointWorkerTarget) *string {
		if v == nil {
			return nil
		}
		return &v.TaskQueue
	}).(pulumi.StringPtrOutput)
}

type ServiceAccountNamespaceAccess struct {
	// The namespace to assign permissions to.
	NamespaceId string `pulumi:"namespaceId"`
	// The permission to assign. Must be one of admin, write, or read (case-insensitive)
	Permission string `pulumi:"permission"`
}

// ServiceAccountNamespaceAccessInput is an input type that accepts ServiceAccountNamespaceAccessArgs and ServiceAccountNamespaceAccessOutput values.
// You can construct a concrete instance of `ServiceAccountNamespaceAccessInput` via:
//
//	ServiceAccountNamespaceAccessArgs{...}
type ServiceAccountNamespaceAccessInput interface {
	pulumi.Input

	ToServiceAccountNamespaceAccessOutput() ServiceAccountNamespaceAccessOutput
	ToServiceAccountNamespaceAccessOutputWithContext(context.Context) ServiceAccountNamespaceAccessOutput
}

type ServiceAccountNamespaceAccessArgs struct {
	// The namespace to assign permissions to.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// The permission to assign. Must be one of admin, write, or read (case-insensitive)
	Permission pulumi.StringInput `pulumi:"permission"`
}

func (ServiceAccountNamespaceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountNamespaceAccess)(nil)).Elem()
}

func (i ServiceAccountNamespaceAccessArgs) ToServiceAccountNamespaceAccessOutput() ServiceAccountNamespaceAccessOutput {
	return i.ToServiceAccountNamespaceAccessOutputWithContext(context.Background())
}

func (i ServiceAccountNamespaceAccessArgs) ToServiceAccountNamespaceAccessOutputWithContext(ctx context.Context) ServiceAccountNamespaceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountNamespaceAccessOutput)
}

// ServiceAccountNamespaceAccessArrayInput is an input type that accepts ServiceAccountNamespaceAccessArray and ServiceAccountNamespaceAccessArrayOutput values.
// You can construct a concrete instance of `ServiceAccountNamespaceAccessArrayInput` via:
//
//	ServiceAccountNamespaceAccessArray{ ServiceAccountNamespaceAccessArgs{...} }
type ServiceAccountNamespaceAccessArrayInput interface {
	pulumi.Input

	ToServiceAccountNamespaceAccessArrayOutput() ServiceAccountNamespaceAccessArrayOutput
	ToServiceAccountNamespaceAccessArrayOutputWithContext(context.Context) ServiceAccountNamespaceAccessArrayOutput
}

type ServiceAccountNamespaceAccessArray []ServiceAccountNamespaceAccessInput

func (ServiceAccountNamespaceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountNamespaceAccess)(nil)).Elem()
}

func (i ServiceAccountNamespaceAccessArray) ToServiceAccountNamespaceAccessArrayOutput() ServiceAccountNamespaceAccessArrayOutput {
	return i.ToServiceAccountNamespaceAccessArrayOutputWithContext(context.Background())
}

func (i ServiceAccountNamespaceAccessArray) ToServiceAccountNamespaceAccessArrayOutputWithContext(ctx context.Context) ServiceAccountNamespaceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountNamespaceAccessArrayOutput)
}

type ServiceAccountNamespaceAccessOutput struct{ *pulumi.OutputState }

func (ServiceAccountNamespaceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountNamespaceAccess)(nil)).Elem()
}

func (o ServiceAccountNamespaceAccessOutput) ToServiceAccountNamespaceAccessOutput() ServiceAccountNamespaceAccessOutput {
	return o
}

func (o ServiceAccountNamespaceAccessOutput) ToServiceAccountNamespaceAccessOutputWithContext(ctx context.Context) ServiceAccountNamespaceAccessOutput {
	return o
}

// The namespace to assign permissions to.
func (o ServiceAccountNamespaceAccessOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountNamespaceAccess) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The permission to assign. Must be one of admin, write, or read (case-insensitive)
func (o ServiceAccountNamespaceAccessOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountNamespaceAccess) string { return v.Permission }).(pulumi.StringOutput)
}

type ServiceAccountNamespaceAccessArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountNamespaceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountNamespaceAccess)(nil)).Elem()
}

func (o ServiceAccountNamespaceAccessArrayOutput) ToServiceAccountNamespaceAccessArrayOutput() ServiceAccountNamespaceAccessArrayOutput {
	return o
}

func (o ServiceAccountNamespaceAccessArrayOutput) ToServiceAccountNamespaceAccessArrayOutputWithContext(ctx context.Context) ServiceAccountNamespaceAccessArrayOutput {
	return o
}

func (o ServiceAccountNamespaceAccessArrayOutput) Index(i pulumi.IntInput) ServiceAccountNamespaceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountNamespaceAccess {
		return vs[0].([]ServiceAccountNamespaceAccess)[vs[1].(int)]
	}).(ServiceAccountNamespaceAccessOutput)
}

type ServiceAccountTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// ServiceAccountTimeoutsInput is an input type that accepts ServiceAccountTimeoutsArgs and ServiceAccountTimeoutsOutput values.
// You can construct a concrete instance of `ServiceAccountTimeoutsInput` via:
//
//	ServiceAccountTimeoutsArgs{...}
type ServiceAccountTimeoutsInput interface {
	pulumi.Input

	ToServiceAccountTimeoutsOutput() ServiceAccountTimeoutsOutput
	ToServiceAccountTimeoutsOutputWithContext(context.Context) ServiceAccountTimeoutsOutput
}

type ServiceAccountTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (ServiceAccountTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountTimeouts)(nil)).Elem()
}

func (i ServiceAccountTimeoutsArgs) ToServiceAccountTimeoutsOutput() ServiceAccountTimeoutsOutput {
	return i.ToServiceAccountTimeoutsOutputWithContext(context.Background())
}

func (i ServiceAccountTimeoutsArgs) ToServiceAccountTimeoutsOutputWithContext(ctx context.Context) ServiceAccountTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTimeoutsOutput)
}

func (i ServiceAccountTimeoutsArgs) ToServiceAccountTimeoutsPtrOutput() ServiceAccountTimeoutsPtrOutput {
	return i.ToServiceAccountTimeoutsPtrOutputWithContext(context.Background())
}

func (i ServiceAccountTimeoutsArgs) ToServiceAccountTimeoutsPtrOutputWithContext(ctx context.Context) ServiceAccountTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTimeoutsOutput).ToServiceAccountTimeoutsPtrOutputWithContext(ctx)
}

// ServiceAccountTimeoutsPtrInput is an input type that accepts ServiceAccountTimeoutsArgs, ServiceAccountTimeoutsPtr and ServiceAccountTimeoutsPtrOutput values.
// You can construct a concrete instance of `ServiceAccountTimeoutsPtrInput` via:
//
//	        ServiceAccountTimeoutsArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountTimeoutsPtrInput interface {
	pulumi.Input

	ToServiceAccountTimeoutsPtrOutput() ServiceAccountTimeoutsPtrOutput
	ToServiceAccountTimeoutsPtrOutputWithContext(context.Context) ServiceAccountTimeoutsPtrOutput
}

type serviceAccountTimeoutsPtrType ServiceAccountTimeoutsArgs

func ServiceAccountTimeoutsPtr(v *ServiceAccountTimeoutsArgs) ServiceAccountTimeoutsPtrInput {
	return (*serviceAccountTimeoutsPtrType)(v)
}

func (*serviceAccountTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTimeouts)(nil)).Elem()
}

func (i *serviceAccountTimeoutsPtrType) ToServiceAccountTimeoutsPtrOutput() ServiceAccountTimeoutsPtrOutput {
	return i.ToServiceAccountTimeoutsPtrOutputWithContext(context.Background())
}

func (i *serviceAccountTimeoutsPtrType) ToServiceAccountTimeoutsPtrOutputWithContext(ctx context.Context) ServiceAccountTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTimeoutsPtrOutput)
}

type ServiceAccountTimeoutsOutput struct{ *pulumi.OutputState }

func (ServiceAccountTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountTimeouts)(nil)).Elem()
}

func (o ServiceAccountTimeoutsOutput) ToServiceAccountTimeoutsOutput() ServiceAccountTimeoutsOutput {
	return o
}

func (o ServiceAccountTimeoutsOutput) ToServiceAccountTimeoutsOutputWithContext(ctx context.Context) ServiceAccountTimeoutsOutput {
	return o
}

func (o ServiceAccountTimeoutsOutput) ToServiceAccountTimeoutsPtrOutput() ServiceAccountTimeoutsPtrOutput {
	return o.ToServiceAccountTimeoutsPtrOutputWithContext(context.Background())
}

func (o ServiceAccountTimeoutsOutput) ToServiceAccountTimeoutsPtrOutputWithContext(ctx context.Context) ServiceAccountTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountTimeouts) *ServiceAccountTimeouts {
		return &v
	}).(ServiceAccountTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ServiceAccountTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ServiceAccountTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type ServiceAccountTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountTimeouts)(nil)).Elem()
}

func (o ServiceAccountTimeoutsPtrOutput) ToServiceAccountTimeoutsPtrOutput() ServiceAccountTimeoutsPtrOutput {
	return o
}

func (o ServiceAccountTimeoutsPtrOutput) ToServiceAccountTimeoutsPtrOutputWithContext(ctx context.Context) ServiceAccountTimeoutsPtrOutput {
	return o
}

func (o ServiceAccountTimeoutsPtrOutput) Elem() ServiceAccountTimeoutsOutput {
	return o.ApplyT(func(v *ServiceAccountTimeouts) ServiceAccountTimeouts {
		if v != nil {
			return *v
		}
		var ret ServiceAccountTimeouts
		return ret
	}).(ServiceAccountTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o ServiceAccountTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o ServiceAccountTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type UserNamespaceAccess struct {
	// The namespace to assign permissions to.
	NamespaceId string `pulumi:"namespaceId"`
	// The permission to assign. Must be one of admin, write, or read (case-insensitive)
	Permission string `pulumi:"permission"`
}

// UserNamespaceAccessInput is an input type that accepts UserNamespaceAccessArgs and UserNamespaceAccessOutput values.
// You can construct a concrete instance of `UserNamespaceAccessInput` via:
//
//	UserNamespaceAccessArgs{...}
type UserNamespaceAccessInput interface {
	pulumi.Input

	ToUserNamespaceAccessOutput() UserNamespaceAccessOutput
	ToUserNamespaceAccessOutputWithContext(context.Context) UserNamespaceAccessOutput
}

type UserNamespaceAccessArgs struct {
	// The namespace to assign permissions to.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// The permission to assign. Must be one of admin, write, or read (case-insensitive)
	Permission pulumi.StringInput `pulumi:"permission"`
}

func (UserNamespaceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserNamespaceAccess)(nil)).Elem()
}

func (i UserNamespaceAccessArgs) ToUserNamespaceAccessOutput() UserNamespaceAccessOutput {
	return i.ToUserNamespaceAccessOutputWithContext(context.Background())
}

func (i UserNamespaceAccessArgs) ToUserNamespaceAccessOutputWithContext(ctx context.Context) UserNamespaceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNamespaceAccessOutput)
}

// UserNamespaceAccessArrayInput is an input type that accepts UserNamespaceAccessArray and UserNamespaceAccessArrayOutput values.
// You can construct a concrete instance of `UserNamespaceAccessArrayInput` via:
//
//	UserNamespaceAccessArray{ UserNamespaceAccessArgs{...} }
type UserNamespaceAccessArrayInput interface {
	pulumi.Input

	ToUserNamespaceAccessArrayOutput() UserNamespaceAccessArrayOutput
	ToUserNamespaceAccessArrayOutputWithContext(context.Context) UserNamespaceAccessArrayOutput
}

type UserNamespaceAccessArray []UserNamespaceAccessInput

func (UserNamespaceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserNamespaceAccess)(nil)).Elem()
}

func (i UserNamespaceAccessArray) ToUserNamespaceAccessArrayOutput() UserNamespaceAccessArrayOutput {
	return i.ToUserNamespaceAccessArrayOutputWithContext(context.Background())
}

func (i UserNamespaceAccessArray) ToUserNamespaceAccessArrayOutputWithContext(ctx context.Context) UserNamespaceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNamespaceAccessArrayOutput)
}

type UserNamespaceAccessOutput struct{ *pulumi.OutputState }

func (UserNamespaceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserNamespaceAccess)(nil)).Elem()
}

func (o UserNamespaceAccessOutput) ToUserNamespaceAccessOutput() UserNamespaceAccessOutput {
	return o
}

func (o UserNamespaceAccessOutput) ToUserNamespaceAccessOutputWithContext(ctx context.Context) UserNamespaceAccessOutput {
	return o
}

// The namespace to assign permissions to.
func (o UserNamespaceAccessOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v UserNamespaceAccess) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The permission to assign. Must be one of admin, write, or read (case-insensitive)
func (o UserNamespaceAccessOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v UserNamespaceAccess) string { return v.Permission }).(pulumi.StringOutput)
}

type UserNamespaceAccessArrayOutput struct{ *pulumi.OutputState }

func (UserNamespaceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserNamespaceAccess)(nil)).Elem()
}

func (o UserNamespaceAccessArrayOutput) ToUserNamespaceAccessArrayOutput() UserNamespaceAccessArrayOutput {
	return o
}

func (o UserNamespaceAccessArrayOutput) ToUserNamespaceAccessArrayOutputWithContext(ctx context.Context) UserNamespaceAccessArrayOutput {
	return o
}

func (o UserNamespaceAccessArrayOutput) Index(i pulumi.IntInput) UserNamespaceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserNamespaceAccess {
		return vs[0].([]UserNamespaceAccess)[vs[1].(int)]
	}).(UserNamespaceAccessOutput)
}

type UserTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
}

// UserTimeoutsInput is an input type that accepts UserTimeoutsArgs and UserTimeoutsOutput values.
// You can construct a concrete instance of `UserTimeoutsInput` via:
//
//	UserTimeoutsArgs{...}
type UserTimeoutsInput interface {
	pulumi.Input

	ToUserTimeoutsOutput() UserTimeoutsOutput
	ToUserTimeoutsOutputWithContext(context.Context) UserTimeoutsOutput
}

type UserTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
}

func (UserTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTimeouts)(nil)).Elem()
}

func (i UserTimeoutsArgs) ToUserTimeoutsOutput() UserTimeoutsOutput {
	return i.ToUserTimeoutsOutputWithContext(context.Background())
}

func (i UserTimeoutsArgs) ToUserTimeoutsOutputWithContext(ctx context.Context) UserTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTimeoutsOutput)
}

func (i UserTimeoutsArgs) ToUserTimeoutsPtrOutput() UserTimeoutsPtrOutput {
	return i.ToUserTimeoutsPtrOutputWithContext(context.Background())
}

func (i UserTimeoutsArgs) ToUserTimeoutsPtrOutputWithContext(ctx context.Context) UserTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTimeoutsOutput).ToUserTimeoutsPtrOutputWithContext(ctx)
}

// UserTimeoutsPtrInput is an input type that accepts UserTimeoutsArgs, UserTimeoutsPtr and UserTimeoutsPtrOutput values.
// You can construct a concrete instance of `UserTimeoutsPtrInput` via:
//
//	        UserTimeoutsArgs{...}
//
//	or:
//
//	        nil
type UserTimeoutsPtrInput interface {
	pulumi.Input

	ToUserTimeoutsPtrOutput() UserTimeoutsPtrOutput
	ToUserTimeoutsPtrOutputWithContext(context.Context) UserTimeoutsPtrOutput
}

type userTimeoutsPtrType UserTimeoutsArgs

func UserTimeoutsPtr(v *UserTimeoutsArgs) UserTimeoutsPtrInput {
	return (*userTimeoutsPtrType)(v)
}

func (*userTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTimeouts)(nil)).Elem()
}

func (i *userTimeoutsPtrType) ToUserTimeoutsPtrOutput() UserTimeoutsPtrOutput {
	return i.ToUserTimeoutsPtrOutputWithContext(context.Background())
}

func (i *userTimeoutsPtrType) ToUserTimeoutsPtrOutputWithContext(ctx context.Context) UserTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTimeoutsPtrOutput)
}

type UserTimeoutsOutput struct{ *pulumi.OutputState }

func (UserTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTimeouts)(nil)).Elem()
}

func (o UserTimeoutsOutput) ToUserTimeoutsOutput() UserTimeoutsOutput {
	return o
}

func (o UserTimeoutsOutput) ToUserTimeoutsOutputWithContext(ctx context.Context) UserTimeoutsOutput {
	return o
}

func (o UserTimeoutsOutput) ToUserTimeoutsPtrOutput() UserTimeoutsPtrOutput {
	return o.ToUserTimeoutsPtrOutputWithContext(context.Background())
}

func (o UserTimeoutsOutput) ToUserTimeoutsPtrOutputWithContext(ctx context.Context) UserTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserTimeouts) *UserTimeouts {
		return &v
	}).(UserTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o UserTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o UserTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

type UserTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (UserTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserTimeouts)(nil)).Elem()
}

func (o UserTimeoutsPtrOutput) ToUserTimeoutsPtrOutput() UserTimeoutsPtrOutput {
	return o
}

func (o UserTimeoutsPtrOutput) ToUserTimeoutsPtrOutputWithContext(ctx context.Context) UserTimeoutsPtrOutput {
	return o
}

func (o UserTimeoutsPtrOutput) Elem() UserTimeoutsOutput {
	return o.ApplyT(func(v *UserTimeouts) UserTimeouts {
		if v != nil {
			return *v
		}
		var ret UserTimeouts
		return ret
	}).(UserTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o UserTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o UserTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

type GetNamespacesNamespace struct {
	// The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud.
	AcceptedClientCa string `pulumi:"acceptedClientCa"`
	// The currently active region for the namespace.
	ActiveRegion string `pulumi:"activeRegion"`
	// If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
	ApiKeyAuth *bool `pulumi:"apiKeyAuth"`
	// A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters.
	CertificateFilters []GetNamespacesNamespaceCertificateFilter `pulumi:"certificateFilters"`
	// A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
	CodecServer GetNamespacesNamespaceCodecServer `pulumi:"codecServer"`
	// The date and time when the namespace was created.
	CreatedTime string `pulumi:"createdTime"`
	// The custom search attributes to use for the namespace.
	CustomSearchAttributes map[string]string `pulumi:"customSearchAttributes"`
	// The endpoints for the namespace.
	Endpoints GetNamespacesNamespaceEndpoints `pulumi:"endpoints"`
	// The unique identifier of the namespace across all Temporal Cloud tenants.
	Id string `pulumi:"id"`
	// The date and time when the namespace was last modified. Will not be set if the namespace has never been modified.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// The limits set on the namespace currently.
	Limits GetNamespacesNamespaceLimits `pulumi:"limits"`
	// The name of the namespace.
	Name string `pulumi:"name"`
	// The private connectivities for the namespace, if any.
	PrivateConnectivities []GetNamespacesNamespacePrivateConnectivity `pulumi:"privateConnectivities"`
	Regions               []string                                    `pulumi:"regions"`
	// The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
	RetentionDays int `pulumi:"retentionDays"`
	// The current state of the namespace.
	State string `pulumi:"state"`
}

// GetNamespacesNamespaceInput is an input type that accepts GetNamespacesNamespaceArgs and GetNamespacesNamespaceOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceInput` via:
//
//	GetNamespacesNamespaceArgs{...}
type GetNamespacesNamespaceInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput
	ToGetNamespacesNamespaceOutputWithContext(context.Context) GetNamespacesNamespaceOutput
}

type GetNamespacesNamespaceArgs struct {
	// The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud.
	AcceptedClientCa pulumi.StringInput `pulumi:"acceptedClientCa"`
	// The currently active region for the namespace.
	ActiveRegion pulumi.StringInput `pulumi:"activeRegion"`
	// If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
	ApiKeyAuth pulumi.BoolPtrInput `pulumi:"apiKeyAuth"`
	// A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters.
	CertificateFilters GetNamespacesNamespaceCertificateFilterArrayInput `pulumi:"certificateFilters"`
	// A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
	CodecServer GetNamespacesNamespaceCodecServerInput `pulumi:"codecServer"`
	// The date and time when the namespace was created.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// The custom search attributes to use for the namespace.
	CustomSearchAttributes pulumi.StringMapInput `pulumi:"customSearchAttributes"`
	// The endpoints for the namespace.
	Endpoints GetNamespacesNamespaceEndpointsInput `pulumi:"endpoints"`
	// The unique identifier of the namespace across all Temporal Cloud tenants.
	Id pulumi.StringInput `pulumi:"id"`
	// The date and time when the namespace was last modified. Will not be set if the namespace has never been modified.
	LastModifiedTime pulumi.StringInput `pulumi:"lastModifiedTime"`
	// The limits set on the namespace currently.
	Limits GetNamespacesNamespaceLimitsInput `pulumi:"limits"`
	// The name of the namespace.
	Name pulumi.StringInput `pulumi:"name"`
	// The private connectivities for the namespace, if any.
	PrivateConnectivities GetNamespacesNamespacePrivateConnectivityArrayInput `pulumi:"privateConnectivities"`
	Regions               pulumi.StringArrayInput                             `pulumi:"regions"`
	// The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
	RetentionDays pulumi.IntInput `pulumi:"retentionDays"`
	// The current state of the namespace.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetNamespacesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return i.ToGetNamespacesNamespaceOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceOutput)
}

// GetNamespacesNamespaceArrayInput is an input type that accepts GetNamespacesNamespaceArray and GetNamespacesNamespaceArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceArrayInput` via:
//
//	GetNamespacesNamespaceArray{ GetNamespacesNamespaceArgs{...} }
type GetNamespacesNamespaceArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput
	ToGetNamespacesNamespaceArrayOutputWithContext(context.Context) GetNamespacesNamespaceArrayOutput
}

type GetNamespacesNamespaceArray []GetNamespacesNamespaceInput

func (GetNamespacesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return i.ToGetNamespacesNamespaceArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceArrayOutput)
}

type GetNamespacesNamespaceOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return o
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return o
}

// The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud.
func (o GetNamespacesNamespaceOutput) AcceptedClientCa() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.AcceptedClientCa }).(pulumi.StringOutput)
}

// The currently active region for the namespace.
func (o GetNamespacesNamespaceOutput) ActiveRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.ActiveRegion }).(pulumi.StringOutput)
}

// If true, Temporal Cloud will use API key authentication for this namespace. If false, mutual TLS (mTLS) authentication will be used.
func (o GetNamespacesNamespaceOutput) ApiKeyAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) *bool { return v.ApiKeyAuth }).(pulumi.BoolPtrOutput)
}

// A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters.
func (o GetNamespacesNamespaceOutput) CertificateFilters() GetNamespacesNamespaceCertificateFilterArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) []GetNamespacesNamespaceCertificateFilter { return v.CertificateFilters }).(GetNamespacesNamespaceCertificateFilterArrayOutput)
}

// A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
func (o GetNamespacesNamespaceOutput) CodecServer() GetNamespacesNamespaceCodecServerOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) GetNamespacesNamespaceCodecServer { return v.CodecServer }).(GetNamespacesNamespaceCodecServerOutput)
}

// The date and time when the namespace was created.
func (o GetNamespacesNamespaceOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The custom search attributes to use for the namespace.
func (o GetNamespacesNamespaceOutput) CustomSearchAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) map[string]string { return v.CustomSearchAttributes }).(pulumi.StringMapOutput)
}

// The endpoints for the namespace.
func (o GetNamespacesNamespaceOutput) Endpoints() GetNamespacesNamespaceEndpointsOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) GetNamespacesNamespaceEndpoints { return v.Endpoints }).(GetNamespacesNamespaceEndpointsOutput)
}

// The unique identifier of the namespace across all Temporal Cloud tenants.
func (o GetNamespacesNamespaceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Id }).(pulumi.StringOutput)
}

// The date and time when the namespace was last modified. Will not be set if the namespace has never been modified.
func (o GetNamespacesNamespaceOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The limits set on the namespace currently.
func (o GetNamespacesNamespaceOutput) Limits() GetNamespacesNamespaceLimitsOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) GetNamespacesNamespaceLimits { return v.Limits }).(GetNamespacesNamespaceLimitsOutput)
}

// The name of the namespace.
func (o GetNamespacesNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Name }).(pulumi.StringOutput)
}

// The private connectivities for the namespace, if any.
func (o GetNamespacesNamespaceOutput) PrivateConnectivities() GetNamespacesNamespacePrivateConnectivityArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) []GetNamespacesNamespacePrivateConnectivity {
		return v.PrivateConnectivities
	}).(GetNamespacesNamespacePrivateConnectivityArrayOutput)
}

func (o GetNamespacesNamespaceOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
func (o GetNamespacesNamespaceOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) int { return v.RetentionDays }).(pulumi.IntOutput)
}

// The current state of the namespace.
func (o GetNamespacesNamespaceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.State }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespace {
		return vs[0].([]GetNamespacesNamespace)[vs[1].(int)]
	}).(GetNamespacesNamespaceOutput)
}

type GetNamespacesNamespaceCertificateFilter struct {
	// The certificate's common name.
	CommonName string `pulumi:"commonName"`
	// The certificate's organization.
	Organization string `pulumi:"organization"`
	// The certificate's organizational unit.
	OrganizationalUnit string `pulumi:"organizationalUnit"`
	// The certificate's subject alternative name (or SAN).
	SubjectAlternativeName string `pulumi:"subjectAlternativeName"`
}

// GetNamespacesNamespaceCertificateFilterInput is an input type that accepts GetNamespacesNamespaceCertificateFilterArgs and GetNamespacesNamespaceCertificateFilterOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceCertificateFilterInput` via:
//
//	GetNamespacesNamespaceCertificateFilterArgs{...}
type GetNamespacesNamespaceCertificateFilterInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceCertificateFilterOutput() GetNamespacesNamespaceCertificateFilterOutput
	ToGetNamespacesNamespaceCertificateFilterOutputWithContext(context.Context) GetNamespacesNamespaceCertificateFilterOutput
}

type GetNamespacesNamespaceCertificateFilterArgs struct {
	// The certificate's common name.
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// The certificate's organization.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The certificate's organizational unit.
	OrganizationalUnit pulumi.StringInput `pulumi:"organizationalUnit"`
	// The certificate's subject alternative name (or SAN).
	SubjectAlternativeName pulumi.StringInput `pulumi:"subjectAlternativeName"`
}

func (GetNamespacesNamespaceCertificateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceCertificateFilter)(nil)).Elem()
}

func (i GetNamespacesNamespaceCertificateFilterArgs) ToGetNamespacesNamespaceCertificateFilterOutput() GetNamespacesNamespaceCertificateFilterOutput {
	return i.ToGetNamespacesNamespaceCertificateFilterOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceCertificateFilterArgs) ToGetNamespacesNamespaceCertificateFilterOutputWithContext(ctx context.Context) GetNamespacesNamespaceCertificateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceCertificateFilterOutput)
}

// GetNamespacesNamespaceCertificateFilterArrayInput is an input type that accepts GetNamespacesNamespaceCertificateFilterArray and GetNamespacesNamespaceCertificateFilterArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceCertificateFilterArrayInput` via:
//
//	GetNamespacesNamespaceCertificateFilterArray{ GetNamespacesNamespaceCertificateFilterArgs{...} }
type GetNamespacesNamespaceCertificateFilterArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceCertificateFilterArrayOutput() GetNamespacesNamespaceCertificateFilterArrayOutput
	ToGetNamespacesNamespaceCertificateFilterArrayOutputWithContext(context.Context) GetNamespacesNamespaceCertificateFilterArrayOutput
}

type GetNamespacesNamespaceCertificateFilterArray []GetNamespacesNamespaceCertificateFilterInput

func (GetNamespacesNamespaceCertificateFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespaceCertificateFilter)(nil)).Elem()
}

func (i GetNamespacesNamespaceCertificateFilterArray) ToGetNamespacesNamespaceCertificateFilterArrayOutput() GetNamespacesNamespaceCertificateFilterArrayOutput {
	return i.ToGetNamespacesNamespaceCertificateFilterArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceCertificateFilterArray) ToGetNamespacesNamespaceCertificateFilterArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceCertificateFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceCertificateFilterArrayOutput)
}

type GetNamespacesNamespaceCertificateFilterOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceCertificateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceCertificateFilter)(nil)).Elem()
}

func (o GetNamespacesNamespaceCertificateFilterOutput) ToGetNamespacesNamespaceCertificateFilterOutput() GetNamespacesNamespaceCertificateFilterOutput {
	return o
}

func (o GetNamespacesNamespaceCertificateFilterOutput) ToGetNamespacesNamespaceCertificateFilterOutputWithContext(ctx context.Context) GetNamespacesNamespaceCertificateFilterOutput {
	return o
}

// The certificate's common name.
func (o GetNamespacesNamespaceCertificateFilterOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCertificateFilter) string { return v.CommonName }).(pulumi.StringOutput)
}

// The certificate's organization.
func (o GetNamespacesNamespaceCertificateFilterOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCertificateFilter) string { return v.Organization }).(pulumi.StringOutput)
}

// The certificate's organizational unit.
func (o GetNamespacesNamespaceCertificateFilterOutput) OrganizationalUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCertificateFilter) string { return v.OrganizationalUnit }).(pulumi.StringOutput)
}

// The certificate's subject alternative name (or SAN).
func (o GetNamespacesNamespaceCertificateFilterOutput) SubjectAlternativeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCertificateFilter) string { return v.SubjectAlternativeName }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceCertificateFilterArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceCertificateFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespaceCertificateFilter)(nil)).Elem()
}

func (o GetNamespacesNamespaceCertificateFilterArrayOutput) ToGetNamespacesNamespaceCertificateFilterArrayOutput() GetNamespacesNamespaceCertificateFilterArrayOutput {
	return o
}

func (o GetNamespacesNamespaceCertificateFilterArrayOutput) ToGetNamespacesNamespaceCertificateFilterArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceCertificateFilterArrayOutput {
	return o
}

func (o GetNamespacesNamespaceCertificateFilterArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceCertificateFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespaceCertificateFilter {
		return vs[0].([]GetNamespacesNamespaceCertificateFilter)[vs[1].(int)]
	}).(GetNamespacesNamespaceCertificateFilterOutput)
}

type GetNamespacesNamespaceCodecServer struct {
	// The endpoint of the codec server.
	Endpoint string `pulumi:"endpoint"`
	// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
	IncludeCrossOriginCredentials bool `pulumi:"includeCrossOriginCredentials"`
	// If true, Temporal Cloud will pass the access token to the codec server upon each request.
	PassAccessToken bool `pulumi:"passAccessToken"`
}

// GetNamespacesNamespaceCodecServerInput is an input type that accepts GetNamespacesNamespaceCodecServerArgs and GetNamespacesNamespaceCodecServerOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceCodecServerInput` via:
//
//	GetNamespacesNamespaceCodecServerArgs{...}
type GetNamespacesNamespaceCodecServerInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceCodecServerOutput() GetNamespacesNamespaceCodecServerOutput
	ToGetNamespacesNamespaceCodecServerOutputWithContext(context.Context) GetNamespacesNamespaceCodecServerOutput
}

type GetNamespacesNamespaceCodecServerArgs struct {
	// The endpoint of the codec server.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
	IncludeCrossOriginCredentials pulumi.BoolInput `pulumi:"includeCrossOriginCredentials"`
	// If true, Temporal Cloud will pass the access token to the codec server upon each request.
	PassAccessToken pulumi.BoolInput `pulumi:"passAccessToken"`
}

func (GetNamespacesNamespaceCodecServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceCodecServer)(nil)).Elem()
}

func (i GetNamespacesNamespaceCodecServerArgs) ToGetNamespacesNamespaceCodecServerOutput() GetNamespacesNamespaceCodecServerOutput {
	return i.ToGetNamespacesNamespaceCodecServerOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceCodecServerArgs) ToGetNamespacesNamespaceCodecServerOutputWithContext(ctx context.Context) GetNamespacesNamespaceCodecServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceCodecServerOutput)
}

type GetNamespacesNamespaceCodecServerOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceCodecServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceCodecServer)(nil)).Elem()
}

func (o GetNamespacesNamespaceCodecServerOutput) ToGetNamespacesNamespaceCodecServerOutput() GetNamespacesNamespaceCodecServerOutput {
	return o
}

func (o GetNamespacesNamespaceCodecServerOutput) ToGetNamespacesNamespaceCodecServerOutputWithContext(ctx context.Context) GetNamespacesNamespaceCodecServerOutput {
	return o
}

// The endpoint of the codec server.
func (o GetNamespacesNamespaceCodecServerOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCodecServer) string { return v.Endpoint }).(pulumi.StringOutput)
}

// If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
func (o GetNamespacesNamespaceCodecServerOutput) IncludeCrossOriginCredentials() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCodecServer) bool { return v.IncludeCrossOriginCredentials }).(pulumi.BoolOutput)
}

// If true, Temporal Cloud will pass the access token to the codec server upon each request.
func (o GetNamespacesNamespaceCodecServerOutput) PassAccessToken() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceCodecServer) bool { return v.PassAccessToken }).(pulumi.BoolOutput)
}

type GetNamespacesNamespaceEndpoints struct {
	// The gRPC hostport address that the temporal workers, clients and tctl connect to.
	GrpcAddress string `pulumi:"grpcAddress"`
	// The web UI address.
	WebAddress string `pulumi:"webAddress"`
}

// GetNamespacesNamespaceEndpointsInput is an input type that accepts GetNamespacesNamespaceEndpointsArgs and GetNamespacesNamespaceEndpointsOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceEndpointsInput` via:
//
//	GetNamespacesNamespaceEndpointsArgs{...}
type GetNamespacesNamespaceEndpointsInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceEndpointsOutput() GetNamespacesNamespaceEndpointsOutput
	ToGetNamespacesNamespaceEndpointsOutputWithContext(context.Context) GetNamespacesNamespaceEndpointsOutput
}

type GetNamespacesNamespaceEndpointsArgs struct {
	// The gRPC hostport address that the temporal workers, clients and tctl connect to.
	GrpcAddress pulumi.StringInput `pulumi:"grpcAddress"`
	// The web UI address.
	WebAddress pulumi.StringInput `pulumi:"webAddress"`
}

func (GetNamespacesNamespaceEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceEndpoints)(nil)).Elem()
}

func (i GetNamespacesNamespaceEndpointsArgs) ToGetNamespacesNamespaceEndpointsOutput() GetNamespacesNamespaceEndpointsOutput {
	return i.ToGetNamespacesNamespaceEndpointsOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceEndpointsArgs) ToGetNamespacesNamespaceEndpointsOutputWithContext(ctx context.Context) GetNamespacesNamespaceEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceEndpointsOutput)
}

type GetNamespacesNamespaceEndpointsOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceEndpoints)(nil)).Elem()
}

func (o GetNamespacesNamespaceEndpointsOutput) ToGetNamespacesNamespaceEndpointsOutput() GetNamespacesNamespaceEndpointsOutput {
	return o
}

func (o GetNamespacesNamespaceEndpointsOutput) ToGetNamespacesNamespaceEndpointsOutputWithContext(ctx context.Context) GetNamespacesNamespaceEndpointsOutput {
	return o
}

// The gRPC hostport address that the temporal workers, clients and tctl connect to.
func (o GetNamespacesNamespaceEndpointsOutput) GrpcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceEndpoints) string { return v.GrpcAddress }).(pulumi.StringOutput)
}

// The web UI address.
func (o GetNamespacesNamespaceEndpointsOutput) WebAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceEndpoints) string { return v.WebAddress }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceLimits struct {
	// The number of actions per second (APS) that is currently allowed for the namespace. The namespace may be throttled if its APS exceeds the limit.
	ActionsPerSecondLimit int `pulumi:"actionsPerSecondLimit"`
}

// GetNamespacesNamespaceLimitsInput is an input type that accepts GetNamespacesNamespaceLimitsArgs and GetNamespacesNamespaceLimitsOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceLimitsInput` via:
//
//	GetNamespacesNamespaceLimitsArgs{...}
type GetNamespacesNamespaceLimitsInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceLimitsOutput() GetNamespacesNamespaceLimitsOutput
	ToGetNamespacesNamespaceLimitsOutputWithContext(context.Context) GetNamespacesNamespaceLimitsOutput
}

type GetNamespacesNamespaceLimitsArgs struct {
	// The number of actions per second (APS) that is currently allowed for the namespace. The namespace may be throttled if its APS exceeds the limit.
	ActionsPerSecondLimit pulumi.IntInput `pulumi:"actionsPerSecondLimit"`
}

func (GetNamespacesNamespaceLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceLimits)(nil)).Elem()
}

func (i GetNamespacesNamespaceLimitsArgs) ToGetNamespacesNamespaceLimitsOutput() GetNamespacesNamespaceLimitsOutput {
	return i.ToGetNamespacesNamespaceLimitsOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceLimitsArgs) ToGetNamespacesNamespaceLimitsOutputWithContext(ctx context.Context) GetNamespacesNamespaceLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceLimitsOutput)
}

type GetNamespacesNamespaceLimitsOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespaceLimits)(nil)).Elem()
}

func (o GetNamespacesNamespaceLimitsOutput) ToGetNamespacesNamespaceLimitsOutput() GetNamespacesNamespaceLimitsOutput {
	return o
}

func (o GetNamespacesNamespaceLimitsOutput) ToGetNamespacesNamespaceLimitsOutputWithContext(ctx context.Context) GetNamespacesNamespaceLimitsOutput {
	return o
}

// The number of actions per second (APS) that is currently allowed for the namespace. The namespace may be throttled if its APS exceeds the limit.
func (o GetNamespacesNamespaceLimitsOutput) ActionsPerSecondLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetNamespacesNamespaceLimits) int { return v.ActionsPerSecondLimit }).(pulumi.IntOutput)
}

type GetNamespacesNamespacePrivateConnectivity struct {
	// The AWS PrivateLink info. This will only be set for namespaces whose cloud provider is AWS.
	AwsPrivateLinkInfo GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo `pulumi:"awsPrivateLinkInfo"`
	// The id of the region where the private connectivity applies.
	Region string `pulumi:"region"`
}

// GetNamespacesNamespacePrivateConnectivityInput is an input type that accepts GetNamespacesNamespacePrivateConnectivityArgs and GetNamespacesNamespacePrivateConnectivityOutput values.
// You can construct a concrete instance of `GetNamespacesNamespacePrivateConnectivityInput` via:
//
//	GetNamespacesNamespacePrivateConnectivityArgs{...}
type GetNamespacesNamespacePrivateConnectivityInput interface {
	pulumi.Input

	ToGetNamespacesNamespacePrivateConnectivityOutput() GetNamespacesNamespacePrivateConnectivityOutput
	ToGetNamespacesNamespacePrivateConnectivityOutputWithContext(context.Context) GetNamespacesNamespacePrivateConnectivityOutput
}

type GetNamespacesNamespacePrivateConnectivityArgs struct {
	// The AWS PrivateLink info. This will only be set for namespaces whose cloud provider is AWS.
	AwsPrivateLinkInfo GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoInput `pulumi:"awsPrivateLinkInfo"`
	// The id of the region where the private connectivity applies.
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetNamespacesNamespacePrivateConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivity)(nil)).Elem()
}

func (i GetNamespacesNamespacePrivateConnectivityArgs) ToGetNamespacesNamespacePrivateConnectivityOutput() GetNamespacesNamespacePrivateConnectivityOutput {
	return i.ToGetNamespacesNamespacePrivateConnectivityOutputWithContext(context.Background())
}

func (i GetNamespacesNamespacePrivateConnectivityArgs) ToGetNamespacesNamespacePrivateConnectivityOutputWithContext(ctx context.Context) GetNamespacesNamespacePrivateConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespacePrivateConnectivityOutput)
}

// GetNamespacesNamespacePrivateConnectivityArrayInput is an input type that accepts GetNamespacesNamespacePrivateConnectivityArray and GetNamespacesNamespacePrivateConnectivityArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespacePrivateConnectivityArrayInput` via:
//
//	GetNamespacesNamespacePrivateConnectivityArray{ GetNamespacesNamespacePrivateConnectivityArgs{...} }
type GetNamespacesNamespacePrivateConnectivityArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespacePrivateConnectivityArrayOutput() GetNamespacesNamespacePrivateConnectivityArrayOutput
	ToGetNamespacesNamespacePrivateConnectivityArrayOutputWithContext(context.Context) GetNamespacesNamespacePrivateConnectivityArrayOutput
}

type GetNamespacesNamespacePrivateConnectivityArray []GetNamespacesNamespacePrivateConnectivityInput

func (GetNamespacesNamespacePrivateConnectivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespacePrivateConnectivity)(nil)).Elem()
}

func (i GetNamespacesNamespacePrivateConnectivityArray) ToGetNamespacesNamespacePrivateConnectivityArrayOutput() GetNamespacesNamespacePrivateConnectivityArrayOutput {
	return i.ToGetNamespacesNamespacePrivateConnectivityArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespacePrivateConnectivityArray) ToGetNamespacesNamespacePrivateConnectivityArrayOutputWithContext(ctx context.Context) GetNamespacesNamespacePrivateConnectivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespacePrivateConnectivityArrayOutput)
}

type GetNamespacesNamespacePrivateConnectivityOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespacePrivateConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivity)(nil)).Elem()
}

func (o GetNamespacesNamespacePrivateConnectivityOutput) ToGetNamespacesNamespacePrivateConnectivityOutput() GetNamespacesNamespacePrivateConnectivityOutput {
	return o
}

func (o GetNamespacesNamespacePrivateConnectivityOutput) ToGetNamespacesNamespacePrivateConnectivityOutputWithContext(ctx context.Context) GetNamespacesNamespacePrivateConnectivityOutput {
	return o
}

// The AWS PrivateLink info. This will only be set for namespaces whose cloud provider is AWS.
func (o GetNamespacesNamespacePrivateConnectivityOutput) AwsPrivateLinkInfo() GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput {
	return o.ApplyT(func(v GetNamespacesNamespacePrivateConnectivity) GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo {
		return v.AwsPrivateLinkInfo
	}).(GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput)
}

// The id of the region where the private connectivity applies.
func (o GetNamespacesNamespacePrivateConnectivityOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespacePrivateConnectivity) string { return v.Region }).(pulumi.StringOutput)
}

type GetNamespacesNamespacePrivateConnectivityArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespacePrivateConnectivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespacePrivateConnectivity)(nil)).Elem()
}

func (o GetNamespacesNamespacePrivateConnectivityArrayOutput) ToGetNamespacesNamespacePrivateConnectivityArrayOutput() GetNamespacesNamespacePrivateConnectivityArrayOutput {
	return o
}

func (o GetNamespacesNamespacePrivateConnectivityArrayOutput) ToGetNamespacesNamespacePrivateConnectivityArrayOutputWithContext(ctx context.Context) GetNamespacesNamespacePrivateConnectivityArrayOutput {
	return o
}

func (o GetNamespacesNamespacePrivateConnectivityArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespacePrivateConnectivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespacePrivateConnectivity {
		return vs[0].([]GetNamespacesNamespacePrivateConnectivity)[vs[1].(int)]
	}).(GetNamespacesNamespacePrivateConnectivityOutput)
}

type GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo struct {
	// The list of principal arns that are allowed to access the namespace on the private link.
	AllowedPrincipalArns []string `pulumi:"allowedPrincipalArns"`
	// The list of vpc endpoint service names that are associated with the namespace.
	VpcEndpointServiceNames []string `pulumi:"vpcEndpointServiceNames"`
}

// GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoInput is an input type that accepts GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs and GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput values.
// You can construct a concrete instance of `GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoInput` via:
//
//	GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs{...}
type GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoInput interface {
	pulumi.Input

	ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput() GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput
	ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutputWithContext(context.Context) GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput
}

type GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs struct {
	// The list of principal arns that are allowed to access the namespace on the private link.
	AllowedPrincipalArns pulumi.StringArrayInput `pulumi:"allowedPrincipalArns"`
	// The list of vpc endpoint service names that are associated with the namespace.
	VpcEndpointServiceNames pulumi.StringArrayInput `pulumi:"vpcEndpointServiceNames"`
}

func (GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo)(nil)).Elem()
}

func (i GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs) ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput() GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput {
	return i.ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutputWithContext(context.Background())
}

func (i GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs) ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutputWithContext(ctx context.Context) GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput)
}

type GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo)(nil)).Elem()
}

func (o GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput) ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput() GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput {
	return o
}

func (o GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput) ToGetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutputWithContext(ctx context.Context) GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput {
	return o
}

// The list of principal arns that are allowed to access the namespace on the private link.
func (o GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput) AllowedPrincipalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo) []string {
		return v.AllowedPrincipalArns
	}).(pulumi.StringArrayOutput)
}

// The list of vpc endpoint service names that are associated with the namespace.
func (o GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput) VpcEndpointServiceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo) []string {
		return v.VpcEndpointServiceNames
	}).(pulumi.StringArrayOutput)
}

type GetRegionsRegion struct {
	// The name of the Cloud provider for this region, e.g. `aws`.
	CloudProvider string `pulumi:"cloudProvider"`
	// The name of the region within the Cloud provider, e.g. `us-east-1`.
	CloudProviderRegion string `pulumi:"cloudProviderRegion"`
	// The unique identifier for the region, e.g. `aws-us-east-1`.
	Id string `pulumi:"id"`
	// The physical location of the region, e.g. "US East (N. Virginia)".
	Location string `pulumi:"location"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//	GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// The name of the Cloud provider for this region, e.g. `aws`.
	CloudProvider pulumi.StringInput `pulumi:"cloudProvider"`
	// The name of the region within the Cloud provider, e.g. `us-east-1`.
	CloudProviderRegion pulumi.StringInput `pulumi:"cloudProviderRegion"`
	// The unique identifier for the region, e.g. `aws-us-east-1`.
	Id pulumi.StringInput `pulumi:"id"`
	// The physical location of the region, e.g. "US East (N. Virginia)".
	Location pulumi.StringInput `pulumi:"location"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//	GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// The name of the Cloud provider for this region, e.g. `aws`.
func (o GetRegionsRegionOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// The name of the region within the Cloud provider, e.g. `us-east-1`.
func (o GetRegionsRegionOutput) CloudProviderRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.CloudProviderRegion }).(pulumi.StringOutput)
}

// The unique identifier for the region, e.g. `aws-us-east-1`.
func (o GetRegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// The physical location of the region, e.g. "US East (N. Virginia)".
func (o GetRegionsRegionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Location }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetServiceAccountsServiceAccount struct {
	// The role on the account. Must be one of admin, developer, or read (case-insensitive).
	AccountAccess string `pulumi:"accountAccess"`
	// The creation time of the Service Account.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the Service Account.
	Description string `pulumi:"description"`
	// The unique identifier of the Service Account.
	Id string `pulumi:"id"`
	// The name associated with the service account.
	Name string `pulumi:"name"`
	// The set of namespace permissions for this service account, including each namespace and its role.
	NamespaceAccesses []GetServiceAccountsServiceAccountNamespaceAccess `pulumi:"namespaceAccesses"`
	// The current state of the Service Account.
	State string `pulumi:"state"`
	// The last update time of the Service Account.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetServiceAccountsServiceAccountInput is an input type that accepts GetServiceAccountsServiceAccountArgs and GetServiceAccountsServiceAccountOutput values.
// You can construct a concrete instance of `GetServiceAccountsServiceAccountInput` via:
//
//	GetServiceAccountsServiceAccountArgs{...}
type GetServiceAccountsServiceAccountInput interface {
	pulumi.Input

	ToGetServiceAccountsServiceAccountOutput() GetServiceAccountsServiceAccountOutput
	ToGetServiceAccountsServiceAccountOutputWithContext(context.Context) GetServiceAccountsServiceAccountOutput
}

type GetServiceAccountsServiceAccountArgs struct {
	// The role on the account. Must be one of admin, developer, or read (case-insensitive).
	AccountAccess pulumi.StringInput `pulumi:"accountAccess"`
	// The creation time of the Service Account.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the Service Account.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique identifier of the Service Account.
	Id pulumi.StringInput `pulumi:"id"`
	// The name associated with the service account.
	Name pulumi.StringInput `pulumi:"name"`
	// The set of namespace permissions for this service account, including each namespace and its role.
	NamespaceAccesses GetServiceAccountsServiceAccountNamespaceAccessArrayInput `pulumi:"namespaceAccesses"`
	// The current state of the Service Account.
	State pulumi.StringInput `pulumi:"state"`
	// The last update time of the Service Account.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetServiceAccountsServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceAccountsServiceAccount)(nil)).Elem()
}

func (i GetServiceAccountsServiceAccountArgs) ToGetServiceAccountsServiceAccountOutput() GetServiceAccountsServiceAccountOutput {
	return i.ToGetServiceAccountsServiceAccountOutputWithContext(context.Background())
}

func (i GetServiceAccountsServiceAccountArgs) ToGetServiceAccountsServiceAccountOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceAccountsServiceAccountOutput)
}

// GetServiceAccountsServiceAccountArrayInput is an input type that accepts GetServiceAccountsServiceAccountArray and GetServiceAccountsServiceAccountArrayOutput values.
// You can construct a concrete instance of `GetServiceAccountsServiceAccountArrayInput` via:
//
//	GetServiceAccountsServiceAccountArray{ GetServiceAccountsServiceAccountArgs{...} }
type GetServiceAccountsServiceAccountArrayInput interface {
	pulumi.Input

	ToGetServiceAccountsServiceAccountArrayOutput() GetServiceAccountsServiceAccountArrayOutput
	ToGetServiceAccountsServiceAccountArrayOutputWithContext(context.Context) GetServiceAccountsServiceAccountArrayOutput
}

type GetServiceAccountsServiceAccountArray []GetServiceAccountsServiceAccountInput

func (GetServiceAccountsServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceAccountsServiceAccount)(nil)).Elem()
}

func (i GetServiceAccountsServiceAccountArray) ToGetServiceAccountsServiceAccountArrayOutput() GetServiceAccountsServiceAccountArrayOutput {
	return i.ToGetServiceAccountsServiceAccountArrayOutputWithContext(context.Background())
}

func (i GetServiceAccountsServiceAccountArray) ToGetServiceAccountsServiceAccountArrayOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceAccountsServiceAccountArrayOutput)
}

type GetServiceAccountsServiceAccountOutput struct{ *pulumi.OutputState }

func (GetServiceAccountsServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceAccountsServiceAccount)(nil)).Elem()
}

func (o GetServiceAccountsServiceAccountOutput) ToGetServiceAccountsServiceAccountOutput() GetServiceAccountsServiceAccountOutput {
	return o
}

func (o GetServiceAccountsServiceAccountOutput) ToGetServiceAccountsServiceAccountOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountOutput {
	return o
}

// The role on the account. Must be one of admin, developer, or read (case-insensitive).
func (o GetServiceAccountsServiceAccountOutput) AccountAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.AccountAccess }).(pulumi.StringOutput)
}

// The creation time of the Service Account.
func (o GetServiceAccountsServiceAccountOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the Service Account.
func (o GetServiceAccountsServiceAccountOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.Description }).(pulumi.StringOutput)
}

// The unique identifier of the Service Account.
func (o GetServiceAccountsServiceAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.Id }).(pulumi.StringOutput)
}

// The name associated with the service account.
func (o GetServiceAccountsServiceAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The set of namespace permissions for this service account, including each namespace and its role.
func (o GetServiceAccountsServiceAccountOutput) NamespaceAccesses() GetServiceAccountsServiceAccountNamespaceAccessArrayOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) []GetServiceAccountsServiceAccountNamespaceAccess {
		return v.NamespaceAccesses
	}).(GetServiceAccountsServiceAccountNamespaceAccessArrayOutput)
}

// The current state of the Service Account.
func (o GetServiceAccountsServiceAccountOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.State }).(pulumi.StringOutput)
}

// The last update time of the Service Account.
func (o GetServiceAccountsServiceAccountOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccount) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetServiceAccountsServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (GetServiceAccountsServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceAccountsServiceAccount)(nil)).Elem()
}

func (o GetServiceAccountsServiceAccountArrayOutput) ToGetServiceAccountsServiceAccountArrayOutput() GetServiceAccountsServiceAccountArrayOutput {
	return o
}

func (o GetServiceAccountsServiceAccountArrayOutput) ToGetServiceAccountsServiceAccountArrayOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountArrayOutput {
	return o
}

func (o GetServiceAccountsServiceAccountArrayOutput) Index(i pulumi.IntInput) GetServiceAccountsServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceAccountsServiceAccount {
		return vs[0].([]GetServiceAccountsServiceAccount)[vs[1].(int)]
	}).(GetServiceAccountsServiceAccountOutput)
}

type GetServiceAccountsServiceAccountNamespaceAccess struct {
	// The namespace to assign permissions to.
	NamespaceId string `pulumi:"namespaceId"`
	// The permission to assign. Must be one of admin, write, or read (case-insensitive)
	Permission string `pulumi:"permission"`
}

// GetServiceAccountsServiceAccountNamespaceAccessInput is an input type that accepts GetServiceAccountsServiceAccountNamespaceAccessArgs and GetServiceAccountsServiceAccountNamespaceAccessOutput values.
// You can construct a concrete instance of `GetServiceAccountsServiceAccountNamespaceAccessInput` via:
//
//	GetServiceAccountsServiceAccountNamespaceAccessArgs{...}
type GetServiceAccountsServiceAccountNamespaceAccessInput interface {
	pulumi.Input

	ToGetServiceAccountsServiceAccountNamespaceAccessOutput() GetServiceAccountsServiceAccountNamespaceAccessOutput
	ToGetServiceAccountsServiceAccountNamespaceAccessOutputWithContext(context.Context) GetServiceAccountsServiceAccountNamespaceAccessOutput
}

type GetServiceAccountsServiceAccountNamespaceAccessArgs struct {
	// The namespace to assign permissions to.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// The permission to assign. Must be one of admin, write, or read (case-insensitive)
	Permission pulumi.StringInput `pulumi:"permission"`
}

func (GetServiceAccountsServiceAccountNamespaceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceAccountsServiceAccountNamespaceAccess)(nil)).Elem()
}

func (i GetServiceAccountsServiceAccountNamespaceAccessArgs) ToGetServiceAccountsServiceAccountNamespaceAccessOutput() GetServiceAccountsServiceAccountNamespaceAccessOutput {
	return i.ToGetServiceAccountsServiceAccountNamespaceAccessOutputWithContext(context.Background())
}

func (i GetServiceAccountsServiceAccountNamespaceAccessArgs) ToGetServiceAccountsServiceAccountNamespaceAccessOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountNamespaceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceAccountsServiceAccountNamespaceAccessOutput)
}

// GetServiceAccountsServiceAccountNamespaceAccessArrayInput is an input type that accepts GetServiceAccountsServiceAccountNamespaceAccessArray and GetServiceAccountsServiceAccountNamespaceAccessArrayOutput values.
// You can construct a concrete instance of `GetServiceAccountsServiceAccountNamespaceAccessArrayInput` via:
//
//	GetServiceAccountsServiceAccountNamespaceAccessArray{ GetServiceAccountsServiceAccountNamespaceAccessArgs{...} }
type GetServiceAccountsServiceAccountNamespaceAccessArrayInput interface {
	pulumi.Input

	ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutput() GetServiceAccountsServiceAccountNamespaceAccessArrayOutput
	ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutputWithContext(context.Context) GetServiceAccountsServiceAccountNamespaceAccessArrayOutput
}

type GetServiceAccountsServiceAccountNamespaceAccessArray []GetServiceAccountsServiceAccountNamespaceAccessInput

func (GetServiceAccountsServiceAccountNamespaceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceAccountsServiceAccountNamespaceAccess)(nil)).Elem()
}

func (i GetServiceAccountsServiceAccountNamespaceAccessArray) ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutput() GetServiceAccountsServiceAccountNamespaceAccessArrayOutput {
	return i.ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutputWithContext(context.Background())
}

func (i GetServiceAccountsServiceAccountNamespaceAccessArray) ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountNamespaceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceAccountsServiceAccountNamespaceAccessArrayOutput)
}

type GetServiceAccountsServiceAccountNamespaceAccessOutput struct{ *pulumi.OutputState }

func (GetServiceAccountsServiceAccountNamespaceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceAccountsServiceAccountNamespaceAccess)(nil)).Elem()
}

func (o GetServiceAccountsServiceAccountNamespaceAccessOutput) ToGetServiceAccountsServiceAccountNamespaceAccessOutput() GetServiceAccountsServiceAccountNamespaceAccessOutput {
	return o
}

func (o GetServiceAccountsServiceAccountNamespaceAccessOutput) ToGetServiceAccountsServiceAccountNamespaceAccessOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountNamespaceAccessOutput {
	return o
}

// The namespace to assign permissions to.
func (o GetServiceAccountsServiceAccountNamespaceAccessOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccountNamespaceAccess) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The permission to assign. Must be one of admin, write, or read (case-insensitive)
func (o GetServiceAccountsServiceAccountNamespaceAccessOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceAccountsServiceAccountNamespaceAccess) string { return v.Permission }).(pulumi.StringOutput)
}

type GetServiceAccountsServiceAccountNamespaceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetServiceAccountsServiceAccountNamespaceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceAccountsServiceAccountNamespaceAccess)(nil)).Elem()
}

func (o GetServiceAccountsServiceAccountNamespaceAccessArrayOutput) ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutput() GetServiceAccountsServiceAccountNamespaceAccessArrayOutput {
	return o
}

func (o GetServiceAccountsServiceAccountNamespaceAccessArrayOutput) ToGetServiceAccountsServiceAccountNamespaceAccessArrayOutputWithContext(ctx context.Context) GetServiceAccountsServiceAccountNamespaceAccessArrayOutput {
	return o
}

func (o GetServiceAccountsServiceAccountNamespaceAccessArrayOutput) Index(i pulumi.IntInput) GetServiceAccountsServiceAccountNamespaceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceAccountsServiceAccountNamespaceAccess {
		return vs[0].([]GetServiceAccountsServiceAccountNamespaceAccess)[vs[1].(int)]
	}).(GetServiceAccountsServiceAccountNamespaceAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApikeyTimeoutsInput)(nil)).Elem(), ApikeyTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApikeyTimeoutsPtrInput)(nil)).Elem(), ApikeyTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsEndpointTimeoutsInput)(nil)).Elem(), MetricsEndpointTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsEndpointTimeoutsPtrInput)(nil)).Elem(), MetricsEndpointTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCertificateFilterInput)(nil)).Elem(), NamespaceCertificateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCertificateFilterArrayInput)(nil)).Elem(), NamespaceCertificateFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCodecServerInput)(nil)).Elem(), NamespaceCodecServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCodecServerPtrInput)(nil)).Elem(), NamespaceCodecServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceEndpointsInput)(nil)).Elem(), NamespaceEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceEndpointsPtrInput)(nil)).Elem(), NamespaceEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTimeoutsInput)(nil)).Elem(), NamespaceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceTimeoutsPtrInput)(nil)).Elem(), NamespaceTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusEndpointTimeoutsInput)(nil)).Elem(), NexusEndpointTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusEndpointTimeoutsPtrInput)(nil)).Elem(), NexusEndpointTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusEndpointWorkerTargetInput)(nil)).Elem(), NexusEndpointWorkerTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NexusEndpointWorkerTargetPtrInput)(nil)).Elem(), NexusEndpointWorkerTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountNamespaceAccessInput)(nil)).Elem(), ServiceAccountNamespaceAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountNamespaceAccessArrayInput)(nil)).Elem(), ServiceAccountNamespaceAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTimeoutsInput)(nil)).Elem(), ServiceAccountTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTimeoutsPtrInput)(nil)).Elem(), ServiceAccountTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserNamespaceAccessInput)(nil)).Elem(), UserNamespaceAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserNamespaceAccessArrayInput)(nil)).Elem(), UserNamespaceAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTimeoutsInput)(nil)).Elem(), UserTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTimeoutsPtrInput)(nil)).Elem(), UserTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceInput)(nil)).Elem(), GetNamespacesNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceArrayInput)(nil)).Elem(), GetNamespacesNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceCertificateFilterInput)(nil)).Elem(), GetNamespacesNamespaceCertificateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceCertificateFilterArrayInput)(nil)).Elem(), GetNamespacesNamespaceCertificateFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceCodecServerInput)(nil)).Elem(), GetNamespacesNamespaceCodecServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceEndpointsInput)(nil)).Elem(), GetNamespacesNamespaceEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceLimitsInput)(nil)).Elem(), GetNamespacesNamespaceLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivityInput)(nil)).Elem(), GetNamespacesNamespacePrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivityArrayInput)(nil)).Elem(), GetNamespacesNamespacePrivateConnectivityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoInput)(nil)).Elem(), GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionInput)(nil)).Elem(), GetRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionArrayInput)(nil)).Elem(), GetRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceAccountsServiceAccountInput)(nil)).Elem(), GetServiceAccountsServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceAccountsServiceAccountArrayInput)(nil)).Elem(), GetServiceAccountsServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceAccountsServiceAccountNamespaceAccessInput)(nil)).Elem(), GetServiceAccountsServiceAccountNamespaceAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceAccountsServiceAccountNamespaceAccessArrayInput)(nil)).Elem(), GetServiceAccountsServiceAccountNamespaceAccessArray{})
	pulumi.RegisterOutputType(ApikeyTimeoutsOutput{})
	pulumi.RegisterOutputType(ApikeyTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(MetricsEndpointTimeoutsOutput{})
	pulumi.RegisterOutputType(MetricsEndpointTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(NamespaceCertificateFilterOutput{})
	pulumi.RegisterOutputType(NamespaceCertificateFilterArrayOutput{})
	pulumi.RegisterOutputType(NamespaceCodecServerOutput{})
	pulumi.RegisterOutputType(NamespaceCodecServerPtrOutput{})
	pulumi.RegisterOutputType(NamespaceEndpointsOutput{})
	pulumi.RegisterOutputType(NamespaceEndpointsPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsOutput{})
	pulumi.RegisterOutputType(NamespaceTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(NexusEndpointTimeoutsOutput{})
	pulumi.RegisterOutputType(NexusEndpointTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(NexusEndpointWorkerTargetOutput{})
	pulumi.RegisterOutputType(NexusEndpointWorkerTargetPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountNamespaceAccessOutput{})
	pulumi.RegisterOutputType(ServiceAccountNamespaceAccessArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountTimeoutsOutput{})
	pulumi.RegisterOutputType(ServiceAccountTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(UserNamespaceAccessOutput{})
	pulumi.RegisterOutputType(UserNamespaceAccessArrayOutput{})
	pulumi.RegisterOutputType(UserTimeoutsOutput{})
	pulumi.RegisterOutputType(UserTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceCertificateFilterOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceCertificateFilterArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceCodecServerOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceEndpointsOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceLimitsOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespacePrivateConnectivityOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespacePrivateConnectivityArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfoOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetServiceAccountsServiceAccountOutput{})
	pulumi.RegisterOutputType(GetServiceAccountsServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(GetServiceAccountsServiceAccountNamespaceAccessOutput{})
	pulumi.RegisterOutputType(GetServiceAccountsServiceAccountNamespaceAccessArrayOutput{})
}
