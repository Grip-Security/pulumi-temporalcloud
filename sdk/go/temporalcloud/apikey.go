// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package temporalcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/Grip-Security/pulumi-temporalcloud/sdk/go/temporalcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provisions a Temporal Cloud API key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Grip-Security/pulumi-temporalcloud/sdk/go/temporalcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			globalServiceAccount, err := temporalcloud.NewServiceAccount(ctx, "global_service_account", &temporalcloud.ServiceAccountArgs{
//				Name:          pulumi.String("admin"),
//				AccountAccess: pulumi.String("Admin"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = temporalcloud.NewApikey(ctx, "global_apikey", &temporalcloud.ApikeyArgs{
//				DisplayName: pulumi.String("admin"),
//				OwnerType:   pulumi.String("service-account"),
//				OwnerId:     globalServiceAccount.ID(),
//				ExpiryTime:  pulumi.String("2024-11-01T00:00:00Z"),
//				Disabled:    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Apikey struct {
	pulumi.CustomResourceState

	// The description for the API key.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the API key is disabled.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The display name for the API key.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The expiry time for the API key in ISO 8601 format.
	ExpiryTime pulumi.StringOutput `pulumi:"expiryTime"`
	// The ID of the owner to create the API key for.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// The type of the owner to create the API key.
	OwnerType pulumi.StringOutput `pulumi:"ownerType"`
	// The current state of the API key.
	State    pulumi.StringOutput     `pulumi:"state"`
	Timeouts ApikeyTimeoutsPtrOutput `pulumi:"timeouts"`
	Token    pulumi.StringOutput     `pulumi:"token"`
}

// NewApikey registers a new resource with the given unique name, arguments, and options.
func NewApikey(ctx *pulumi.Context,
	name string, args *ApikeyArgs, opts ...pulumi.ResourceOption) (*Apikey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ExpiryTime == nil {
		return nil, errors.New("invalid value for required argument 'ExpiryTime'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.OwnerType == nil {
		return nil, errors.New("invalid value for required argument 'OwnerType'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Apikey
	err := ctx.RegisterResource("temporalcloud:index/apikey:Apikey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApikey gets an existing Apikey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApikey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApikeyState, opts ...pulumi.ResourceOption) (*Apikey, error) {
	var resource Apikey
	err := ctx.ReadResource("temporalcloud:index/apikey:Apikey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Apikey resources.
type apikeyState struct {
	// The description for the API key.
	Description *string `pulumi:"description"`
	// Whether the API key is disabled.
	Disabled *bool `pulumi:"disabled"`
	// The display name for the API key.
	DisplayName *string `pulumi:"displayName"`
	// The expiry time for the API key in ISO 8601 format.
	ExpiryTime *string `pulumi:"expiryTime"`
	// The ID of the owner to create the API key for.
	OwnerId *string `pulumi:"ownerId"`
	// The type of the owner to create the API key.
	OwnerType *string `pulumi:"ownerType"`
	// The current state of the API key.
	State    *string         `pulumi:"state"`
	Timeouts *ApikeyTimeouts `pulumi:"timeouts"`
	Token    *string         `pulumi:"token"`
}

type ApikeyState struct {
	// The description for the API key.
	Description pulumi.StringPtrInput
	// Whether the API key is disabled.
	Disabled pulumi.BoolPtrInput
	// The display name for the API key.
	DisplayName pulumi.StringPtrInput
	// The expiry time for the API key in ISO 8601 format.
	ExpiryTime pulumi.StringPtrInput
	// The ID of the owner to create the API key for.
	OwnerId pulumi.StringPtrInput
	// The type of the owner to create the API key.
	OwnerType pulumi.StringPtrInput
	// The current state of the API key.
	State    pulumi.StringPtrInput
	Timeouts ApikeyTimeoutsPtrInput
	Token    pulumi.StringPtrInput
}

func (ApikeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apikeyState)(nil)).Elem()
}

type apikeyArgs struct {
	// The description for the API key.
	Description *string `pulumi:"description"`
	// Whether the API key is disabled.
	Disabled *bool `pulumi:"disabled"`
	// The display name for the API key.
	DisplayName string `pulumi:"displayName"`
	// The expiry time for the API key in ISO 8601 format.
	ExpiryTime string `pulumi:"expiryTime"`
	// The ID of the owner to create the API key for.
	OwnerId string `pulumi:"ownerId"`
	// The type of the owner to create the API key.
	OwnerType string          `pulumi:"ownerType"`
	Timeouts  *ApikeyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Apikey resource.
type ApikeyArgs struct {
	// The description for the API key.
	Description pulumi.StringPtrInput
	// Whether the API key is disabled.
	Disabled pulumi.BoolPtrInput
	// The display name for the API key.
	DisplayName pulumi.StringInput
	// The expiry time for the API key in ISO 8601 format.
	ExpiryTime pulumi.StringInput
	// The ID of the owner to create the API key for.
	OwnerId pulumi.StringInput
	// The type of the owner to create the API key.
	OwnerType pulumi.StringInput
	Timeouts  ApikeyTimeoutsPtrInput
}

func (ApikeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apikeyArgs)(nil)).Elem()
}

type ApikeyInput interface {
	pulumi.Input

	ToApikeyOutput() ApikeyOutput
	ToApikeyOutputWithContext(ctx context.Context) ApikeyOutput
}

func (*Apikey) ElementType() reflect.Type {
	return reflect.TypeOf((**Apikey)(nil)).Elem()
}

func (i *Apikey) ToApikeyOutput() ApikeyOutput {
	return i.ToApikeyOutputWithContext(context.Background())
}

func (i *Apikey) ToApikeyOutputWithContext(ctx context.Context) ApikeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApikeyOutput)
}

// ApikeyArrayInput is an input type that accepts ApikeyArray and ApikeyArrayOutput values.
// You can construct a concrete instance of `ApikeyArrayInput` via:
//
//	ApikeyArray{ ApikeyArgs{...} }
type ApikeyArrayInput interface {
	pulumi.Input

	ToApikeyArrayOutput() ApikeyArrayOutput
	ToApikeyArrayOutputWithContext(context.Context) ApikeyArrayOutput
}

type ApikeyArray []ApikeyInput

func (ApikeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Apikey)(nil)).Elem()
}

func (i ApikeyArray) ToApikeyArrayOutput() ApikeyArrayOutput {
	return i.ToApikeyArrayOutputWithContext(context.Background())
}

func (i ApikeyArray) ToApikeyArrayOutputWithContext(ctx context.Context) ApikeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApikeyArrayOutput)
}

// ApikeyMapInput is an input type that accepts ApikeyMap and ApikeyMapOutput values.
// You can construct a concrete instance of `ApikeyMapInput` via:
//
//	ApikeyMap{ "key": ApikeyArgs{...} }
type ApikeyMapInput interface {
	pulumi.Input

	ToApikeyMapOutput() ApikeyMapOutput
	ToApikeyMapOutputWithContext(context.Context) ApikeyMapOutput
}

type ApikeyMap map[string]ApikeyInput

func (ApikeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Apikey)(nil)).Elem()
}

func (i ApikeyMap) ToApikeyMapOutput() ApikeyMapOutput {
	return i.ToApikeyMapOutputWithContext(context.Background())
}

func (i ApikeyMap) ToApikeyMapOutputWithContext(ctx context.Context) ApikeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApikeyMapOutput)
}

type ApikeyOutput struct{ *pulumi.OutputState }

func (ApikeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Apikey)(nil)).Elem()
}

func (o ApikeyOutput) ToApikeyOutput() ApikeyOutput {
	return o
}

func (o ApikeyOutput) ToApikeyOutputWithContext(ctx context.Context) ApikeyOutput {
	return o
}

// The description for the API key.
func (o ApikeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the API key is disabled.
func (o ApikeyOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Apikey) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The display name for the API key.
func (o ApikeyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The expiry time for the API key in ISO 8601 format.
func (o ApikeyOutput) ExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringOutput { return v.ExpiryTime }).(pulumi.StringOutput)
}

// The ID of the owner to create the API key for.
func (o ApikeyOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// The type of the owner to create the API key.
func (o ApikeyOutput) OwnerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringOutput { return v.OwnerType }).(pulumi.StringOutput)
}

// The current state of the API key.
func (o ApikeyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ApikeyOutput) Timeouts() ApikeyTimeoutsPtrOutput {
	return o.ApplyT(func(v *Apikey) ApikeyTimeoutsPtrOutput { return v.Timeouts }).(ApikeyTimeoutsPtrOutput)
}

func (o ApikeyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Apikey) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type ApikeyArrayOutput struct{ *pulumi.OutputState }

func (ApikeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Apikey)(nil)).Elem()
}

func (o ApikeyArrayOutput) ToApikeyArrayOutput() ApikeyArrayOutput {
	return o
}

func (o ApikeyArrayOutput) ToApikeyArrayOutputWithContext(ctx context.Context) ApikeyArrayOutput {
	return o
}

func (o ApikeyArrayOutput) Index(i pulumi.IntInput) ApikeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Apikey {
		return vs[0].([]*Apikey)[vs[1].(int)]
	}).(ApikeyOutput)
}

type ApikeyMapOutput struct{ *pulumi.OutputState }

func (ApikeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Apikey)(nil)).Elem()
}

func (o ApikeyMapOutput) ToApikeyMapOutput() ApikeyMapOutput {
	return o
}

func (o ApikeyMapOutput) ToApikeyMapOutputWithContext(ctx context.Context) ApikeyMapOutput {
	return o
}

func (o ApikeyMapOutput) MapIndex(k pulumi.StringInput) ApikeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Apikey {
		return vs[0].(map[string]*Apikey)[vs[1].(string)]
	}).(ApikeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApikeyInput)(nil)).Elem(), &Apikey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApikeyArrayInput)(nil)).Elem(), ApikeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApikeyMapInput)(nil)).Elem(), ApikeyMap{})
	pulumi.RegisterOutputType(ApikeyOutput{})
	pulumi.RegisterOutputType(ApikeyArrayOutput{})
	pulumi.RegisterOutputType(ApikeyMapOutput{})
}
