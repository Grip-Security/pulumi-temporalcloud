// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package temporalcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/Grip-Security/pulumi-temporalcloud/sdk/go/temporalcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configures a Temporal Cloud account's metrics
//
// ## Import
//
// ```sh
// $ pulumi import temporalcloud:index/metricsEndpoint:MetricsEndpoint terraform terraform.account-11111-metrics
// ```
type MetricsEndpoint struct {
	pulumi.CustomResourceState

	// The Base64-encoded CA cert in PEM format used to authenticate clients connecting to the metrics endpoint.
	AcceptedClientCa pulumi.StringOutput              `pulumi:"acceptedClientCa"`
	Timeouts         MetricsEndpointTimeoutsPtrOutput `pulumi:"timeouts"`
	// The Prometheus metrics endpoint URI
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewMetricsEndpoint registers a new resource with the given unique name, arguments, and options.
func NewMetricsEndpoint(ctx *pulumi.Context,
	name string, args *MetricsEndpointArgs, opts ...pulumi.ResourceOption) (*MetricsEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptedClientCa == nil {
		return nil, errors.New("invalid value for required argument 'AcceptedClientCa'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricsEndpoint
	err := ctx.RegisterResource("temporalcloud:index/metricsEndpoint:MetricsEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsEndpoint gets an existing MetricsEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsEndpointState, opts ...pulumi.ResourceOption) (*MetricsEndpoint, error) {
	var resource MetricsEndpoint
	err := ctx.ReadResource("temporalcloud:index/metricsEndpoint:MetricsEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsEndpoint resources.
type metricsEndpointState struct {
	// The Base64-encoded CA cert in PEM format used to authenticate clients connecting to the metrics endpoint.
	AcceptedClientCa *string                  `pulumi:"acceptedClientCa"`
	Timeouts         *MetricsEndpointTimeouts `pulumi:"timeouts"`
	// The Prometheus metrics endpoint URI
	Uri *string `pulumi:"uri"`
}

type MetricsEndpointState struct {
	// The Base64-encoded CA cert in PEM format used to authenticate clients connecting to the metrics endpoint.
	AcceptedClientCa pulumi.StringPtrInput
	Timeouts         MetricsEndpointTimeoutsPtrInput
	// The Prometheus metrics endpoint URI
	Uri pulumi.StringPtrInput
}

func (MetricsEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsEndpointState)(nil)).Elem()
}

type metricsEndpointArgs struct {
	// The Base64-encoded CA cert in PEM format used to authenticate clients connecting to the metrics endpoint.
	AcceptedClientCa string                   `pulumi:"acceptedClientCa"`
	Timeouts         *MetricsEndpointTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a MetricsEndpoint resource.
type MetricsEndpointArgs struct {
	// The Base64-encoded CA cert in PEM format used to authenticate clients connecting to the metrics endpoint.
	AcceptedClientCa pulumi.StringInput
	Timeouts         MetricsEndpointTimeoutsPtrInput
}

func (MetricsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsEndpointArgs)(nil)).Elem()
}

type MetricsEndpointInput interface {
	pulumi.Input

	ToMetricsEndpointOutput() MetricsEndpointOutput
	ToMetricsEndpointOutputWithContext(ctx context.Context) MetricsEndpointOutput
}

func (*MetricsEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsEndpoint)(nil)).Elem()
}

func (i *MetricsEndpoint) ToMetricsEndpointOutput() MetricsEndpointOutput {
	return i.ToMetricsEndpointOutputWithContext(context.Background())
}

func (i *MetricsEndpoint) ToMetricsEndpointOutputWithContext(ctx context.Context) MetricsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsEndpointOutput)
}

// MetricsEndpointArrayInput is an input type that accepts MetricsEndpointArray and MetricsEndpointArrayOutput values.
// You can construct a concrete instance of `MetricsEndpointArrayInput` via:
//
//	MetricsEndpointArray{ MetricsEndpointArgs{...} }
type MetricsEndpointArrayInput interface {
	pulumi.Input

	ToMetricsEndpointArrayOutput() MetricsEndpointArrayOutput
	ToMetricsEndpointArrayOutputWithContext(context.Context) MetricsEndpointArrayOutput
}

type MetricsEndpointArray []MetricsEndpointInput

func (MetricsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsEndpoint)(nil)).Elem()
}

func (i MetricsEndpointArray) ToMetricsEndpointArrayOutput() MetricsEndpointArrayOutput {
	return i.ToMetricsEndpointArrayOutputWithContext(context.Background())
}

func (i MetricsEndpointArray) ToMetricsEndpointArrayOutputWithContext(ctx context.Context) MetricsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsEndpointArrayOutput)
}

// MetricsEndpointMapInput is an input type that accepts MetricsEndpointMap and MetricsEndpointMapOutput values.
// You can construct a concrete instance of `MetricsEndpointMapInput` via:
//
//	MetricsEndpointMap{ "key": MetricsEndpointArgs{...} }
type MetricsEndpointMapInput interface {
	pulumi.Input

	ToMetricsEndpointMapOutput() MetricsEndpointMapOutput
	ToMetricsEndpointMapOutputWithContext(context.Context) MetricsEndpointMapOutput
}

type MetricsEndpointMap map[string]MetricsEndpointInput

func (MetricsEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsEndpoint)(nil)).Elem()
}

func (i MetricsEndpointMap) ToMetricsEndpointMapOutput() MetricsEndpointMapOutput {
	return i.ToMetricsEndpointMapOutputWithContext(context.Background())
}

func (i MetricsEndpointMap) ToMetricsEndpointMapOutputWithContext(ctx context.Context) MetricsEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsEndpointMapOutput)
}

type MetricsEndpointOutput struct{ *pulumi.OutputState }

func (MetricsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsEndpoint)(nil)).Elem()
}

func (o MetricsEndpointOutput) ToMetricsEndpointOutput() MetricsEndpointOutput {
	return o
}

func (o MetricsEndpointOutput) ToMetricsEndpointOutputWithContext(ctx context.Context) MetricsEndpointOutput {
	return o
}

// The Base64-encoded CA cert in PEM format used to authenticate clients connecting to the metrics endpoint.
func (o MetricsEndpointOutput) AcceptedClientCa() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsEndpoint) pulumi.StringOutput { return v.AcceptedClientCa }).(pulumi.StringOutput)
}

func (o MetricsEndpointOutput) Timeouts() MetricsEndpointTimeoutsPtrOutput {
	return o.ApplyT(func(v *MetricsEndpoint) MetricsEndpointTimeoutsPtrOutput { return v.Timeouts }).(MetricsEndpointTimeoutsPtrOutput)
}

// The Prometheus metrics endpoint URI
func (o MetricsEndpointOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsEndpoint) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type MetricsEndpointArrayOutput struct{ *pulumi.OutputState }

func (MetricsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsEndpoint)(nil)).Elem()
}

func (o MetricsEndpointArrayOutput) ToMetricsEndpointArrayOutput() MetricsEndpointArrayOutput {
	return o
}

func (o MetricsEndpointArrayOutput) ToMetricsEndpointArrayOutputWithContext(ctx context.Context) MetricsEndpointArrayOutput {
	return o
}

func (o MetricsEndpointArrayOutput) Index(i pulumi.IntInput) MetricsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricsEndpoint {
		return vs[0].([]*MetricsEndpoint)[vs[1].(int)]
	}).(MetricsEndpointOutput)
}

type MetricsEndpointMapOutput struct{ *pulumi.OutputState }

func (MetricsEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsEndpoint)(nil)).Elem()
}

func (o MetricsEndpointMapOutput) ToMetricsEndpointMapOutput() MetricsEndpointMapOutput {
	return o
}

func (o MetricsEndpointMapOutput) ToMetricsEndpointMapOutputWithContext(ctx context.Context) MetricsEndpointMapOutput {
	return o
}

func (o MetricsEndpointMapOutput) MapIndex(k pulumi.StringInput) MetricsEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricsEndpoint {
		return vs[0].(map[string]*MetricsEndpoint)[vs[1].(string)]
	}).(MetricsEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsEndpointInput)(nil)).Elem(), &MetricsEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsEndpointArrayInput)(nil)).Elem(), MetricsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsEndpointMapInput)(nil)).Elem(), MetricsEndpointMap{})
	pulumi.RegisterOutputType(MetricsEndpointOutput{})
	pulumi.RegisterOutputType(MetricsEndpointArrayOutput{})
	pulumi.RegisterOutputType(MetricsEndpointMapOutput{})
}
